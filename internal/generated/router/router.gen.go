//go:build go1.22

// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for OrderStatus.
const (
	Delivered  OrderStatus = "delivered"
	InProgress OrderStatus = "in-progress"
	Placed     OrderStatus = "placed"
)

// Defines values for PetStatus.
const (
	Available PetStatus = "available"
	Sold      PetStatus = "sold"
)

// AnimalCategoryName defines model for AnimalCategoryName.
type AnimalCategoryName = string

// DateTimeMetadata defines model for DateTimeMetadata.
type DateTimeMetadata struct {
	// CreatedAt DateTime(UTC) when the pet was created in the store
	CreatedAt time.Time `json:"created_at"`

	// UpdatedAt DateTime(UTC) when the pet was last updated
	UpdatedAt *time.Time `json:"updated_at"`
}

// Id defines model for Id.
type Id = string

// OrderStatus order status.
type OrderStatus string

// OrderWithMetadata defines model for OrderWithMetadata.
type OrderWithMetadata struct {
	// CreatedAt DateTime(UTC) when the pet was created in the store
	CreatedAt time.Time `json:"created_at"`
	Id        Id        `json:"id"`
	PetId     Id        `json:"pet_id"`

	// ShippedDate Shipped DateTime(UTC)
	ShippedDate *time.Time `json:"shipped_date"`

	// Status order status.
	Status OrderStatus `json:"status"`

	// UpdatedAt DateTime(UTC) when the pet was last updated
	UpdatedAt *time.Time `json:"updated_at"`
}

// Pet defines model for Pet.
type Pet struct {
	CategoryId string  `json:"category_id"`
	Name       PetName `json:"name"`

	// Price Price in USD. Must be positive with max 2 decimal places.
	Price string `json:"price"`

	// Status pet status in the store
	Status *PetStatus `json:"status,omitempty"`
	Tags   *PetTags   `json:"tags,omitempty"`
}

// PetName defines model for PetName.
type PetName = string

// PetPhotos Pet images (up to 10)
type PetPhotos = []openapi_types.File

// PetStatus pet status in the store
type PetStatus string

// PetTags defines model for PetTags.
type PetTags = []string

// PetWithMetadata defines model for PetWithMetadata.
type PetWithMetadata struct {
	CategoryId string `json:"category_id"`

	// CreatedAt DateTime(UTC) when the pet was created in the store
	CreatedAt time.Time `json:"created_at"`
	Id        Id        `json:"id"`
	Name      PetName   `json:"name"`
	PhotoUris *[]string `json:"photo_uris,omitempty"`

	// Price Price in USD. Must be positive with max 2 decimal places.
	Price string `json:"price"`

	// Status pet status in the store
	Status *PetStatus `json:"status,omitempty"`
	Tags   *PetTags   `json:"tags,omitempty"`

	// UpdatedAt DateTime(UTC) when the pet was last updated
	UpdatedAt *time.Time `json:"updated_at"`
}

// UserSchema defines model for User.
type UserSchema struct {
	Email       string   `json:"email"`
	FullName    string   `json:"full_name"`
	PhoneNumber string   `json:"phone_number"`
	Username    Username `json:"username"`
}

// Username defines model for Username.
type Username = string

// AnimalCategoryId defines model for AnimalCategoryId.
type AnimalCategoryId = Id

// Cursor defines model for Cursor.
type Cursor = string

// ImageId defines model for ImageId.
type ImageId = Id

// Limit defines model for Limit.
type Limit = int

// OrderId defines model for OrderId.
type OrderId = Id

// PetId defines model for PetId.
type PetId = Id

// AnimalCategory defines model for AnimalCategory.
type AnimalCategory struct {
	// CreatedAt DateTime(UTC) when the pet was created in the store
	CreatedAt time.Time          `json:"created_at"`
	Id        Id                 `json:"id"`
	Name      AnimalCategoryName `json:"name"`

	// UpdatedAt DateTime(UTC) when the pet was last updated
	UpdatedAt *time.Time `json:"updated_at"`
}

// Generic defines model for Generic.
type Generic struct {
	Message string `json:"message"`
}

// OrderArray defines model for OrderArray.
type OrderArray struct {
	// Count Total number of orders
	Count  int                 `json:"count"`
	Orders []OrderWithMetadata `json:"orders"`
}

// User defines model for User.
type User struct {
	// CreatedAt DateTime(UTC) when the pet was created in the store
	CreatedAt   time.Time `json:"created_at"`
	Email       string    `json:"email"`
	FullName    string    `json:"full_name"`
	PhoneNumber string    `json:"phone_number"`

	// UpdatedAt DateTime(UTC) when the pet was last updated
	UpdatedAt *time.Time `json:"updated_at"`
	Username  Username   `json:"username"`
}

// AnimalCategoryRequest defines model for AnimalCategory.
type AnimalCategoryRequest struct {
	Name AnimalCategoryName `json:"name"`
}

// UserRequest defines model for User.
type UserRequest struct {
	Email       string   `json:"email"`
	FullName    string   `json:"full_name"`
	Password    string   `json:"password"`
	PhoneNumber string   `json:"phone_number"`
	Username    Username `json:"username"`
}

// FindAnimalCategoryParams defines parameters for FindAnimalCategory.
type FindAnimalCategoryParams struct {
	// Name Name of animal category
	Name AnimalCategoryName `form:"name" json:"name"`
}

// AddAnimalCategoryJSONBody defines parameters for AddAnimalCategory.
type AddAnimalCategoryJSONBody struct {
	Name AnimalCategoryName `json:"name"`
}

// ReplaceAnimalCategoryJSONBody defines parameters for ReplaceAnimalCategory.
type ReplaceAnimalCategoryJSONBody struct {
	Name AnimalCategoryName `json:"name"`
}

// FindPetsParams defines parameters for FindPets.
type FindPetsParams struct {
	// Name Name of pet
	Name *PetName `form:"name,omitempty" json:"name,omitempty"`

	// Status Status values that need to be considered for filter
	Status *[]PetStatus `form:"status,omitempty" json:"status,omitempty"`

	// Tags Tags to filter by
	Tags *PetTags `form:"tags,omitempty" json:"tags,omitempty"`

	// Cursor Cursor for pagination (from previous response)
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Number of items to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// AddPetMultipartBody defines parameters for AddPet.
type AddPetMultipartBody struct {
	Pet Pet `json:"pet"`

	// Photos Pet images (up to 10)
	Photos *PetPhotos `json:"photos,omitempty"`
}

// ReplacePetMultipartBody defines parameters for ReplacePet.
type ReplacePetMultipartBody struct {
	Pet Pet `json:"pet"`

	// Photos Pet images (up to 10)
	Photos *PetPhotos `json:"photos,omitempty"`
}

// UploadPetImageMultipartBody defines parameters for UploadPetImage.
type UploadPetImageMultipartBody struct {
	// Photos Pet images (up to 10)
	Photos PetPhotos `json:"photos"`
}

// FindOrdersParams defines parameters for FindOrders.
type FindOrdersParams struct {
	// Status Status values that need to be considered for filter
	Status *[]OrderStatus `form:"status,omitempty" json:"status,omitempty"`

	// AfterDate Filter orders placed after this date-time(UTC)
	AfterDate *time.Time `form:"afterDate,omitempty" json:"afterDate,omitempty"`

	// Cursor Cursor for pagination (from previous response)
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Number of items to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// PlaceOrdersJSONBody defines parameters for PlaceOrders.
type PlaceOrdersJSONBody = []struct {
	PetId Id `json:"petId"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	Email       string   `json:"email"`
	FullName    string   `json:"full_name"`
	Password    string   `json:"password"`
	PhoneNumber string   `json:"phone_number"`
	Username    Username `json:"username"`
}

// ReplaceUserJSONBody defines parameters for ReplaceUser.
type ReplaceUserJSONBody struct {
	Email       string   `json:"email"`
	FullName    string   `json:"full_name"`
	Password    string   `json:"password"`
	PhoneNumber string   `json:"phone_number"`
	Username    Username `json:"username"`
}

// AddAnimalCategoryJSONRequestBody defines body for AddAnimalCategory for application/json ContentType.
type AddAnimalCategoryJSONRequestBody AddAnimalCategoryJSONBody

// ReplaceAnimalCategoryJSONRequestBody defines body for ReplaceAnimalCategory for application/json ContentType.
type ReplaceAnimalCategoryJSONRequestBody ReplaceAnimalCategoryJSONBody

// AddPetMultipartRequestBody defines body for AddPet for multipart/form-data ContentType.
type AddPetMultipartRequestBody AddPetMultipartBody

// ReplacePetMultipartRequestBody defines body for ReplacePet for multipart/form-data ContentType.
type ReplacePetMultipartRequestBody ReplacePetMultipartBody

// UploadPetImageMultipartRequestBody defines body for UploadPetImage for multipart/form-data ContentType.
type UploadPetImageMultipartRequestBody UploadPetImageMultipartBody

// PlaceOrdersJSONRequestBody defines body for PlaceOrders for application/json ContentType.
type PlaceOrdersJSONRequestBody = PlaceOrdersJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// ReplaceUserJSONRequestBody defines body for ReplaceUser for application/json ContentType.
type ReplaceUserJSONRequestBody ReplaceUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find animal-category using name
	// (GET /animal-categories)
	FindAnimalCategory(w http.ResponseWriter, r *http.Request, params FindAnimalCategoryParams)
	// Add new animal-category to the store.
	// (POST /animal-categories)
	AddAnimalCategory(w http.ResponseWriter, r *http.Request)
	// Delete an animal-category.
	// (DELETE /animal-categories/{animalCategoryId})
	DeleteAnimalCategory(w http.ResponseWriter, r *http.Request, animalCategoryId AnimalCategoryId)
	// Replace existing animal-category data using Id.
	// (PUT /animal-categories/{animalCategoryId})
	ReplaceAnimalCategory(w http.ResponseWriter, r *http.Request, animalCategoryId AnimalCategoryId)
	// Find Pets using name, status, tags.
	// (GET /pets)
	FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams)
	// Add new pet to the store.
	// (POST /pets)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Delete a pet.
	// (DELETE /pets/{petId})
	DeletePet(w http.ResponseWriter, r *http.Request, petId PetId)
	// Find pet by ID.
	// (GET /pets/{petId})
	GetPetById(w http.ResponseWriter, r *http.Request, petId PetId)
	// Replace existing pet data using Id.
	// (PUT /pets/{petId})
	ReplacePet(w http.ResponseWriter, r *http.Request, petId PetId)
	// Upload a new image for a pet.
	// (POST /pets/{petId}/images)
	UploadPetImage(w http.ResponseWriter, r *http.Request, petId PetId)
	// Delete a pet image.
	// (DELETE /pets/{petId}/images/{imageId})
	DeletePetImage(w http.ResponseWriter, r *http.Request, petId PetId, imageId ImageId)
	// Get a pet image using ID.
	// (GET /pets/{petId}/images/{imageId})
	GetImageByPetId(w http.ResponseWriter, r *http.Request, petId PetId, imageId ImageId)
	// Find user orders using status.
	// (GET /store/orders)
	FindOrders(w http.ResponseWriter, r *http.Request, params FindOrdersParams)
	// Place orders for pets.
	// (POST /store/orders)
	PlaceOrders(w http.ResponseWriter, r *http.Request)
	// Delete user order by identifier.
	// (DELETE /store/orders/{orderId})
	DeleteOrder(w http.ResponseWriter, r *http.Request, orderId OrderId)
	// Find user order by ID.
	// (GET /store/orders/{orderId})
	GetOrderById(w http.ResponseWriter, r *http.Request, orderId OrderId)
	// Create user.
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Delete user resource.
	// (DELETE /users/{username})
	DeleteUser(w http.ResponseWriter, r *http.Request, username Username)
	// Get user by user name.
	// (GET /users/{username})
	GetUserByName(w http.ResponseWriter, r *http.Request, username Username)
	// Replace user resource.
	// (PUT /users/{username})
	ReplaceUser(w http.ResponseWriter, r *http.Request, username Username)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FindAnimalCategory operation middleware
func (siw *ServerInterfaceWrapper) FindAnimalCategory(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params FindAnimalCategoryParams

	// ------------- Required query parameter "name" -------------

	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindAnimalCategory(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddAnimalCategory operation middleware
func (siw *ServerInterfaceWrapper) AddAnimalCategory(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddAnimalCategory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAnimalCategory operation middleware
func (siw *ServerInterfaceWrapper) DeleteAnimalCategory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "animalCategoryId" -------------
	var animalCategoryId AnimalCategoryId

	err = runtime.BindStyledParameterWithOptions("simple", "animalCategoryId", r.PathValue("animalCategoryId"), &animalCategoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "animalCategoryId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAnimalCategory(w, r, animalCategoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReplaceAnimalCategory operation middleware
func (siw *ServerInterfaceWrapper) ReplaceAnimalCategory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "animalCategoryId" -------------
	var animalCategoryId AnimalCategoryId

	err = runtime.BindStyledParameterWithOptions("simple", "animalCategoryId", r.PathValue("animalCategoryId"), &animalCategoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "animalCategoryId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceAnimalCategory(w, r, animalCategoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FindPets operation middleware
func (siw *ServerInterfaceWrapper) FindPets(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPets(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId PetId

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePet(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPetById operation middleware
func (siw *ServerInterfaceWrapper) GetPetById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId PetId

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPetById(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReplacePet operation middleware
func (siw *ServerInterfaceWrapper) ReplacePet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId PetId

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplacePet(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadPetImage operation middleware
func (siw *ServerInterfaceWrapper) UploadPetImage(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId PetId

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadPetImage(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePetImage operation middleware
func (siw *ServerInterfaceWrapper) DeletePetImage(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId PetId

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	// ------------- Path parameter "imageId" -------------
	var imageId ImageId

	err = runtime.BindStyledParameterWithOptions("simple", "imageId", r.PathValue("imageId"), &imageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "imageId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePetImage(w, r, petId, imageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetImageByPetId operation middleware
func (siw *ServerInterfaceWrapper) GetImageByPetId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId PetId

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	// ------------- Path parameter "imageId" -------------
	var imageId ImageId

	err = runtime.BindStyledParameterWithOptions("simple", "imageId", r.PathValue("imageId"), &imageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "imageId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetImageByPetId(w, r, petId, imageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FindOrders operation middleware
func (siw *ServerInterfaceWrapper) FindOrders(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params FindOrdersParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "afterDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "afterDate", r.URL.Query(), &params.AfterDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "afterDate", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindOrders(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PlaceOrders operation middleware
func (siw *ServerInterfaceWrapper) PlaceOrders(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PlaceOrders(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteOrder operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrder(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId OrderId

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", r.PathValue("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteOrder(w, r, orderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOrderById operation middleware
func (siw *ServerInterfaceWrapper) GetOrderById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId OrderId

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", r.PathValue("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrderById(w, r, orderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username Username

	err = runtime.BindStyledParameterWithOptions("simple", "username", r.PathValue("username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserByName operation middleware
func (siw *ServerInterfaceWrapper) GetUserByName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username Username

	err = runtime.BindStyledParameterWithOptions("simple", "username", r.PathValue("username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserByName(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReplaceUser operation middleware
func (siw *ServerInterfaceWrapper) ReplaceUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username Username

	err = runtime.BindStyledParameterWithOptions("simple", "username", r.PathValue("username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceUser(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/animal-categories", wrapper.FindAnimalCategory)
	m.HandleFunc("POST "+options.BaseURL+"/animal-categories", wrapper.AddAnimalCategory)
	m.HandleFunc("DELETE "+options.BaseURL+"/animal-categories/{animalCategoryId}", wrapper.DeleteAnimalCategory)
	m.HandleFunc("PUT "+options.BaseURL+"/animal-categories/{animalCategoryId}", wrapper.ReplaceAnimalCategory)
	m.HandleFunc("GET "+options.BaseURL+"/pets", wrapper.FindPets)
	m.HandleFunc("POST "+options.BaseURL+"/pets", wrapper.AddPet)
	m.HandleFunc("DELETE "+options.BaseURL+"/pets/{petId}", wrapper.DeletePet)
	m.HandleFunc("GET "+options.BaseURL+"/pets/{petId}", wrapper.GetPetById)
	m.HandleFunc("PUT "+options.BaseURL+"/pets/{petId}", wrapper.ReplacePet)
	m.HandleFunc("POST "+options.BaseURL+"/pets/{petId}/images", wrapper.UploadPetImage)
	m.HandleFunc("DELETE "+options.BaseURL+"/pets/{petId}/images/{imageId}", wrapper.DeletePetImage)
	m.HandleFunc("GET "+options.BaseURL+"/pets/{petId}/images/{imageId}", wrapper.GetImageByPetId)
	m.HandleFunc("GET "+options.BaseURL+"/store/orders", wrapper.FindOrders)
	m.HandleFunc("POST "+options.BaseURL+"/store/orders", wrapper.PlaceOrders)
	m.HandleFunc("DELETE "+options.BaseURL+"/store/orders/{orderId}", wrapper.DeleteOrder)
	m.HandleFunc("GET "+options.BaseURL+"/store/orders/{orderId}", wrapper.GetOrderById)
	m.HandleFunc("POST "+options.BaseURL+"/users", wrapper.CreateUser)
	m.HandleFunc("DELETE "+options.BaseURL+"/users/{username}", wrapper.DeleteUser)
	m.HandleFunc("GET "+options.BaseURL+"/users/{username}", wrapper.GetUserByName)
	m.HandleFunc("PUT "+options.BaseURL+"/users/{username}", wrapper.ReplaceUser)

	return m
}

type AnimalCategoryJSONResponse struct {
	// CreatedAt DateTime(UTC) when the pet was created in the store
	CreatedAt time.Time          `json:"created_at"`
	Id        Id                 `json:"id"`
	Name      AnimalCategoryName `json:"name"`

	// UpdatedAt DateTime(UTC) when the pet was last updated
	UpdatedAt *time.Time `json:"updated_at"`
}

type GenericJSONResponse struct {
	Message string `json:"message"`
}

type OrderArrayResponseHeaders struct {
	XNextCursor string
}
type OrderArrayJSONResponse struct {
	Body struct {
		// Count Total number of orders
		Count  int                 `json:"count"`
		Orders []OrderWithMetadata `json:"orders"`
	}

	Headers OrderArrayResponseHeaders
}

type UserJSONResponse struct {
	// CreatedAt DateTime(UTC) when the pet was created in the store
	CreatedAt   time.Time `json:"created_at"`
	Email       string    `json:"email"`
	FullName    string    `json:"full_name"`
	PhoneNumber string    `json:"phone_number"`

	// UpdatedAt DateTime(UTC) when the pet was last updated
	UpdatedAt *time.Time `json:"updated_at"`
	Username  Username   `json:"username"`
}

type FindAnimalCategoryRequestObject struct {
	Params FindAnimalCategoryParams
}

type FindAnimalCategoryResponseObject interface {
	VisitFindAnimalCategoryResponse(w http.ResponseWriter) error
}

type FindAnimalCategory200JSONResponse struct{ AnimalCategoryJSONResponse }

func (response FindAnimalCategory200JSONResponse) VisitFindAnimalCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindAnimalCategorydefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response FindAnimalCategorydefaultJSONResponse) VisitFindAnimalCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddAnimalCategoryRequestObject struct {
	Body *AddAnimalCategoryJSONRequestBody
}

type AddAnimalCategoryResponseObject interface {
	VisitAddAnimalCategoryResponse(w http.ResponseWriter) error
}

type AddAnimalCategory201JSONResponse struct{ AnimalCategoryJSONResponse }

func (response AddAnimalCategory201JSONResponse) VisitAddAnimalCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddAnimalCategorydefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response AddAnimalCategorydefaultJSONResponse) VisitAddAnimalCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteAnimalCategoryRequestObject struct {
	AnimalCategoryId AnimalCategoryId `json:"animalCategoryId"`
}

type DeleteAnimalCategoryResponseObject interface {
	VisitDeleteAnimalCategoryResponse(w http.ResponseWriter) error
}

type DeleteAnimalCategory204Response struct {
}

func (response DeleteAnimalCategory204Response) VisitDeleteAnimalCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAnimalCategorydefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response DeleteAnimalCategorydefaultJSONResponse) VisitDeleteAnimalCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplaceAnimalCategoryRequestObject struct {
	AnimalCategoryId AnimalCategoryId `json:"animalCategoryId"`
	Body             *ReplaceAnimalCategoryJSONRequestBody
}

type ReplaceAnimalCategoryResponseObject interface {
	VisitReplaceAnimalCategoryResponse(w http.ResponseWriter) error
}

type ReplaceAnimalCategory200JSONResponse struct{ AnimalCategoryJSONResponse }

func (response ReplaceAnimalCategory200JSONResponse) VisitReplaceAnimalCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceAnimalCategorydefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response ReplaceAnimalCategorydefaultJSONResponse) VisitReplaceAnimalCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type FindPetsRequestObject struct {
	Params FindPetsParams
}

type FindPetsResponseObject interface {
	VisitFindPetsResponse(w http.ResponseWriter) error
}

type FindPets200ResponseHeaders struct {
	XNextCursor string
}

type FindPets200JSONResponse struct {
	Body struct {
		// Count Total number of pets
		Count int               `json:"count"`
		Pets  []PetWithMetadata `json:"pets"`
	}
	Headers FindPets200ResponseHeaders
}

func (response FindPets200JSONResponse) VisitFindPetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Next-Cursor", fmt.Sprint(response.Headers.XNextCursor))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type FindPetsdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response FindPetsdefaultJSONResponse) VisitFindPetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddPetRequestObject struct {
	Body *multipart.Reader
}

type AddPetResponseObject interface {
	VisitAddPetResponse(w http.ResponseWriter) error
}

type AddPet202Response struct {
}

func (response AddPet202Response) VisitAddPetResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type AddPetdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response AddPetdefaultJSONResponse) VisitAddPetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeletePetRequestObject struct {
	PetId PetId `json:"petId"`
}

type DeletePetResponseObject interface {
	VisitDeletePetResponse(w http.ResponseWriter) error
}

type DeletePet204Response struct {
}

func (response DeletePet204Response) VisitDeletePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePetdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response DeletePetdefaultJSONResponse) VisitDeletePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetPetByIdRequestObject struct {
	PetId PetId `json:"petId"`
}

type GetPetByIdResponseObject interface {
	VisitGetPetByIdResponse(w http.ResponseWriter) error
}

type GetPetById200JSONResponse PetWithMetadata

func (response GetPetById200JSONResponse) VisitGetPetByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPetByIddefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response GetPetByIddefaultJSONResponse) VisitGetPetByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplacePetRequestObject struct {
	PetId PetId `json:"petId"`
	Body  *multipart.Reader
}

type ReplacePetResponseObject interface {
	VisitReplacePetResponse(w http.ResponseWriter) error
}

type ReplacePet202Response struct {
}

func (response ReplacePet202Response) VisitReplacePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type ReplacePetdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response ReplacePetdefaultJSONResponse) VisitReplacePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UploadPetImageRequestObject struct {
	PetId PetId `json:"petId"`
	Body  *multipart.Reader
}

type UploadPetImageResponseObject interface {
	VisitUploadPetImageResponse(w http.ResponseWriter) error
}

type UploadPetImage202Response struct {
}

func (response UploadPetImage202Response) VisitUploadPetImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type UploadPetImagedefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response UploadPetImagedefaultJSONResponse) VisitUploadPetImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeletePetImageRequestObject struct {
	PetId   PetId   `json:"petId"`
	ImageId ImageId `json:"imageId"`
}

type DeletePetImageResponseObject interface {
	VisitDeletePetImageResponse(w http.ResponseWriter) error
}

type DeletePetImage204Response struct {
}

func (response DeletePetImage204Response) VisitDeletePetImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePetImagedefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response DeletePetImagedefaultJSONResponse) VisitDeletePetImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetImageByPetIdRequestObject struct {
	PetId   PetId   `json:"petId"`
	ImageId ImageId `json:"imageId"`
}

type GetImageByPetIdResponseObject interface {
	VisitGetImageByPetIdResponse(w http.ResponseWriter) error
}

type GetImageByPetId200ImagejpegResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetImageByPetId200ImagejpegResponse) VisitGetImageByPetIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/jpeg")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetImageByPetIddefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response GetImageByPetIddefaultJSONResponse) VisitGetImageByPetIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type FindOrdersRequestObject struct {
	Params FindOrdersParams
}

type FindOrdersResponseObject interface {
	VisitFindOrdersResponse(w http.ResponseWriter) error
}

type FindOrders200JSONResponse struct{ OrderArrayJSONResponse }

func (response FindOrders200JSONResponse) VisitFindOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Next-Cursor", fmt.Sprint(response.Headers.XNextCursor))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type FindOrdersdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response FindOrdersdefaultJSONResponse) VisitFindOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PlaceOrdersRequestObject struct {
	Body *PlaceOrdersJSONRequestBody
}

type PlaceOrdersResponseObject interface {
	VisitPlaceOrdersResponse(w http.ResponseWriter) error
}

type PlaceOrders201JSONResponse struct{ OrderArrayJSONResponse }

func (response PlaceOrders201JSONResponse) VisitPlaceOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Next-Cursor", fmt.Sprint(response.Headers.XNextCursor))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PlaceOrdersdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response PlaceOrdersdefaultJSONResponse) VisitPlaceOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteOrderRequestObject struct {
	OrderId OrderId `json:"orderId"`
}

type DeleteOrderResponseObject interface {
	VisitDeleteOrderResponse(w http.ResponseWriter) error
}

type DeleteOrder204Response struct {
}

func (response DeleteOrder204Response) VisitDeleteOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteOrderdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response DeleteOrderdefaultJSONResponse) VisitDeleteOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetOrderByIdRequestObject struct {
	OrderId OrderId `json:"orderId"`
}

type GetOrderByIdResponseObject interface {
	VisitGetOrderByIdResponse(w http.ResponseWriter) error
}

type GetOrderById200JSONResponse OrderWithMetadata

func (response GetOrderById200JSONResponse) VisitGetOrderByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOrderByIddefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response GetOrderByIddefaultJSONResponse) VisitGetOrderByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse struct{ UserJSONResponse }

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response CreateUserdefaultJSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUserRequestObject struct {
	Username Username `json:"username"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser204Response struct {
}

func (response DeleteUser204Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUserdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response DeleteUserdefaultJSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserByNameRequestObject struct {
	Username Username `json:"username"`
}

type GetUserByNameResponseObject interface {
	VisitGetUserByNameResponse(w http.ResponseWriter) error
}

type GetUserByName200JSONResponse struct{ UserJSONResponse }

func (response GetUserByName200JSONResponse) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByNamedefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response GetUserByNamedefaultJSONResponse) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplaceUserRequestObject struct {
	Username Username `json:"username"`
	Body     *ReplaceUserJSONRequestBody
}

type ReplaceUserResponseObject interface {
	VisitReplaceUserResponse(w http.ResponseWriter) error
}

type ReplaceUser200JSONResponse struct{ UserJSONResponse }

func (response ReplaceUser200JSONResponse) VisitReplaceUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceUserdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response ReplaceUserdefaultJSONResponse) VisitReplaceUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Find animal-category using name
	// (GET /animal-categories)
	FindAnimalCategory(ctx context.Context, request FindAnimalCategoryRequestObject) (FindAnimalCategoryResponseObject, error)
	// Add new animal-category to the store.
	// (POST /animal-categories)
	AddAnimalCategory(ctx context.Context, request AddAnimalCategoryRequestObject) (AddAnimalCategoryResponseObject, error)
	// Delete an animal-category.
	// (DELETE /animal-categories/{animalCategoryId})
	DeleteAnimalCategory(ctx context.Context, request DeleteAnimalCategoryRequestObject) (DeleteAnimalCategoryResponseObject, error)
	// Replace existing animal-category data using Id.
	// (PUT /animal-categories/{animalCategoryId})
	ReplaceAnimalCategory(ctx context.Context, request ReplaceAnimalCategoryRequestObject) (ReplaceAnimalCategoryResponseObject, error)
	// Find Pets using name, status, tags.
	// (GET /pets)
	FindPets(ctx context.Context, request FindPetsRequestObject) (FindPetsResponseObject, error)
	// Add new pet to the store.
	// (POST /pets)
	AddPet(ctx context.Context, request AddPetRequestObject) (AddPetResponseObject, error)
	// Delete a pet.
	// (DELETE /pets/{petId})
	DeletePet(ctx context.Context, request DeletePetRequestObject) (DeletePetResponseObject, error)
	// Find pet by ID.
	// (GET /pets/{petId})
	GetPetById(ctx context.Context, request GetPetByIdRequestObject) (GetPetByIdResponseObject, error)
	// Replace existing pet data using Id.
	// (PUT /pets/{petId})
	ReplacePet(ctx context.Context, request ReplacePetRequestObject) (ReplacePetResponseObject, error)
	// Upload a new image for a pet.
	// (POST /pets/{petId}/images)
	UploadPetImage(ctx context.Context, request UploadPetImageRequestObject) (UploadPetImageResponseObject, error)
	// Delete a pet image.
	// (DELETE /pets/{petId}/images/{imageId})
	DeletePetImage(ctx context.Context, request DeletePetImageRequestObject) (DeletePetImageResponseObject, error)
	// Get a pet image using ID.
	// (GET /pets/{petId}/images/{imageId})
	GetImageByPetId(ctx context.Context, request GetImageByPetIdRequestObject) (GetImageByPetIdResponseObject, error)
	// Find user orders using status.
	// (GET /store/orders)
	FindOrders(ctx context.Context, request FindOrdersRequestObject) (FindOrdersResponseObject, error)
	// Place orders for pets.
	// (POST /store/orders)
	PlaceOrders(ctx context.Context, request PlaceOrdersRequestObject) (PlaceOrdersResponseObject, error)
	// Delete user order by identifier.
	// (DELETE /store/orders/{orderId})
	DeleteOrder(ctx context.Context, request DeleteOrderRequestObject) (DeleteOrderResponseObject, error)
	// Find user order by ID.
	// (GET /store/orders/{orderId})
	GetOrderById(ctx context.Context, request GetOrderByIdRequestObject) (GetOrderByIdResponseObject, error)
	// Create user.
	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Delete user resource.
	// (DELETE /users/{username})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Get user by user name.
	// (GET /users/{username})
	GetUserByName(ctx context.Context, request GetUserByNameRequestObject) (GetUserByNameResponseObject, error)
	// Replace user resource.
	// (PUT /users/{username})
	ReplaceUser(ctx context.Context, request ReplaceUserRequestObject) (ReplaceUserResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// FindAnimalCategory operation middleware
func (sh *strictHandler) FindAnimalCategory(w http.ResponseWriter, r *http.Request, params FindAnimalCategoryParams) {
	var request FindAnimalCategoryRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindAnimalCategory(ctx, request.(FindAnimalCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindAnimalCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindAnimalCategoryResponseObject); ok {
		if err := validResponse.VisitFindAnimalCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddAnimalCategory operation middleware
func (sh *strictHandler) AddAnimalCategory(w http.ResponseWriter, r *http.Request) {
	var request AddAnimalCategoryRequestObject

	var body AddAnimalCategoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddAnimalCategory(ctx, request.(AddAnimalCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddAnimalCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddAnimalCategoryResponseObject); ok {
		if err := validResponse.VisitAddAnimalCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAnimalCategory operation middleware
func (sh *strictHandler) DeleteAnimalCategory(w http.ResponseWriter, r *http.Request, animalCategoryId AnimalCategoryId) {
	var request DeleteAnimalCategoryRequestObject

	request.AnimalCategoryId = animalCategoryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAnimalCategory(ctx, request.(DeleteAnimalCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAnimalCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAnimalCategoryResponseObject); ok {
		if err := validResponse.VisitDeleteAnimalCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceAnimalCategory operation middleware
func (sh *strictHandler) ReplaceAnimalCategory(w http.ResponseWriter, r *http.Request, animalCategoryId AnimalCategoryId) {
	var request ReplaceAnimalCategoryRequestObject

	request.AnimalCategoryId = animalCategoryId

	var body ReplaceAnimalCategoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceAnimalCategory(ctx, request.(ReplaceAnimalCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceAnimalCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceAnimalCategoryResponseObject); ok {
		if err := validResponse.VisitReplaceAnimalCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindPets operation middleware
func (sh *strictHandler) FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams) {
	var request FindPetsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindPets(ctx, request.(FindPetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindPets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindPetsResponseObject); ok {
		if err := validResponse.VisitFindPetsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddPet operation middleware
func (sh *strictHandler) AddPet(w http.ResponseWriter, r *http.Request) {
	var request AddPetRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddPet(ctx, request.(AddPetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddPet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddPetResponseObject); ok {
		if err := validResponse.VisitAddPetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePet operation middleware
func (sh *strictHandler) DeletePet(w http.ResponseWriter, r *http.Request, petId PetId) {
	var request DeletePetRequestObject

	request.PetId = petId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePet(ctx, request.(DeletePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePetResponseObject); ok {
		if err := validResponse.VisitDeletePetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPetById operation middleware
func (sh *strictHandler) GetPetById(w http.ResponseWriter, r *http.Request, petId PetId) {
	var request GetPetByIdRequestObject

	request.PetId = petId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPetById(ctx, request.(GetPetByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPetById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPetByIdResponseObject); ok {
		if err := validResponse.VisitGetPetByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplacePet operation middleware
func (sh *strictHandler) ReplacePet(w http.ResponseWriter, r *http.Request, petId PetId) {
	var request ReplacePetRequestObject

	request.PetId = petId

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplacePet(ctx, request.(ReplacePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplacePet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplacePetResponseObject); ok {
		if err := validResponse.VisitReplacePetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UploadPetImage operation middleware
func (sh *strictHandler) UploadPetImage(w http.ResponseWriter, r *http.Request, petId PetId) {
	var request UploadPetImageRequestObject

	request.PetId = petId

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UploadPetImage(ctx, request.(UploadPetImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadPetImage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UploadPetImageResponseObject); ok {
		if err := validResponse.VisitUploadPetImageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePetImage operation middleware
func (sh *strictHandler) DeletePetImage(w http.ResponseWriter, r *http.Request, petId PetId, imageId ImageId) {
	var request DeletePetImageRequestObject

	request.PetId = petId
	request.ImageId = imageId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePetImage(ctx, request.(DeletePetImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePetImage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePetImageResponseObject); ok {
		if err := validResponse.VisitDeletePetImageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetImageByPetId operation middleware
func (sh *strictHandler) GetImageByPetId(w http.ResponseWriter, r *http.Request, petId PetId, imageId ImageId) {
	var request GetImageByPetIdRequestObject

	request.PetId = petId
	request.ImageId = imageId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetImageByPetId(ctx, request.(GetImageByPetIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetImageByPetId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetImageByPetIdResponseObject); ok {
		if err := validResponse.VisitGetImageByPetIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindOrders operation middleware
func (sh *strictHandler) FindOrders(w http.ResponseWriter, r *http.Request, params FindOrdersParams) {
	var request FindOrdersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindOrders(ctx, request.(FindOrdersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindOrders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindOrdersResponseObject); ok {
		if err := validResponse.VisitFindOrdersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PlaceOrders operation middleware
func (sh *strictHandler) PlaceOrders(w http.ResponseWriter, r *http.Request) {
	var request PlaceOrdersRequestObject

	var body PlaceOrdersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PlaceOrders(ctx, request.(PlaceOrdersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PlaceOrders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PlaceOrdersResponseObject); ok {
		if err := validResponse.VisitPlaceOrdersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteOrder operation middleware
func (sh *strictHandler) DeleteOrder(w http.ResponseWriter, r *http.Request, orderId OrderId) {
	var request DeleteOrderRequestObject

	request.OrderId = orderId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOrder(ctx, request.(DeleteOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOrder")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteOrderResponseObject); ok {
		if err := validResponse.VisitDeleteOrderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOrderById operation middleware
func (sh *strictHandler) GetOrderById(w http.ResponseWriter, r *http.Request, orderId OrderId) {
	var request GetOrderByIdRequestObject

	request.OrderId = orderId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrderById(ctx, request.(GetOrderByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrderById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOrderByIdResponseObject); ok {
		if err := validResponse.VisitGetOrderByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(w http.ResponseWriter, r *http.Request, username Username) {
	var request DeleteUserRequestObject

	request.Username = username

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserByName operation middleware
func (sh *strictHandler) GetUserByName(w http.ResponseWriter, r *http.Request, username Username) {
	var request GetUserByNameRequestObject

	request.Username = username

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserByName(ctx, request.(GetUserByNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserByName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserByNameResponseObject); ok {
		if err := validResponse.VisitGetUserByNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceUser operation middleware
func (sh *strictHandler) ReplaceUser(w http.ResponseWriter, r *http.Request, username Username) {
	var request ReplaceUserRequestObject

	request.Username = username

	var body ReplaceUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceUser(ctx, request.(ReplaceUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceUserResponseObject); ok {
		if err := validResponse.VisitReplaceUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
