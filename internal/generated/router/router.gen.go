//go:build go1.22

// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	Api_keyScopes       = "api_key.Scopes"
	Petstore_authScopes = "petstore_auth.Scopes"
)

// Defines values for OrderStatus.
const (
	Approved  OrderStatus = "approved"
	Delivered OrderStatus = "delivered"
	Placed    OrderStatus = "placed"
)

// Defines values for PetStatus.
const (
	PetStatusAvailable PetStatus = "available"
	PetStatusPending   PetStatus = "pending"
	PetStatusSold      PetStatus = "sold"
)

// Defines values for FindPetsByStatusParamsStatus.
const (
	FindPetsByStatusParamsStatusAvailable FindPetsByStatusParamsStatus = "available"
	FindPetsByStatusParamsStatusPending   FindPetsByStatusParamsStatus = "pending"
	FindPetsByStatusParamsStatusSold      FindPetsByStatusParamsStatus = "sold"
)

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Category defines model for Category.
type Category struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Order defines model for Order.
type Order struct {
	Complete *bool      `json:"complete,omitempty"`
	Id       *int64     `json:"id,omitempty"`
	PetId    *int64     `json:"petId,omitempty"`
	Quantity *int32     `json:"quantity,omitempty"`
	ShipDate *time.Time `json:"shipDate,omitempty"`

	// Status Order Status
	Status *OrderStatus `json:"status,omitempty"`
}

// OrderStatus Order Status
type OrderStatus string

// Pet defines model for Pet.
type Pet struct {
	Category  *Category `json:"category,omitempty"`
	Id        *int64    `json:"id,omitempty"`
	Name      string    `json:"name"`
	PhotoUrls []string  `json:"photoUrls"`

	// Status pet status in the store
	Status *PetStatus `json:"status,omitempty"`
	Tags   *[]Tag     `json:"tags,omitempty"`
}

// PetStatus pet status in the store
type PetStatus string

// Tag defines model for Tag.
type Tag struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	Id        *int64  `json:"id,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Password  *string `json:"password,omitempty"`
	Phone     *string `json:"phone,omitempty"`

	// UserStatus User Status
	UserStatus *int32  `json:"userStatus,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// UserArray defines model for UserArray.
type UserArray = []User

// FindPetsByStatusParams defines parameters for FindPetsByStatus.
type FindPetsByStatusParams struct {
	// Status Status values that need to be considered for filter
	Status *FindPetsByStatusParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// FindPetsByStatusParamsStatus defines parameters for FindPetsByStatus.
type FindPetsByStatusParamsStatus string

// FindPetsByTagsParams defines parameters for FindPetsByTags.
type FindPetsByTagsParams struct {
	// Tags Tags to filter by
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`
}

// DeletePetParams defines parameters for DeletePet.
type DeletePetParams struct {
	ApiKey *string `json:"api_key,omitempty"`
}

// UpdatePetWithFormParams defines parameters for UpdatePetWithForm.
type UpdatePetWithFormParams struct {
	// Name Name of pet that needs to be updated
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Status Status of pet that needs to be updated
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// UploadFileParams defines parameters for UploadFile.
type UploadFileParams struct {
	// AdditionalMetadata Additional Metadata
	AdditionalMetadata *string `form:"additionalMetadata,omitempty" json:"additionalMetadata,omitempty"`
}

// CreateUsersWithListInputJSONBody defines parameters for CreateUsersWithListInput.
type CreateUsersWithListInputJSONBody = []User

// LoginUserParams defines parameters for LoginUser.
type LoginUserParams struct {
	// Username The user name for login
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Password The password for login in clear text
	Password *string `form:"password,omitempty" json:"password,omitempty"`
}

// AddPetJSONRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody = Pet

// UpdatePetJSONRequestBody defines body for UpdatePet for application/json ContentType.
type UpdatePetJSONRequestBody = Pet

// PlaceOrderJSONRequestBody defines body for PlaceOrder for application/json ContentType.
type PlaceOrderJSONRequestBody = Order

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// CreateUsersWithListInputJSONRequestBody defines body for CreateUsersWithListInput for application/json ContentType.
type CreateUsersWithListInputJSONRequestBody = CreateUsersWithListInputJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new pet to the store.
	// (POST /pet)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Update an existing pet.
	// (PUT /pet)
	UpdatePet(w http.ResponseWriter, r *http.Request)
	// Finds Pets by status.
	// (GET /pet/findByStatus)
	FindPetsByStatus(w http.ResponseWriter, r *http.Request, params FindPetsByStatusParams)
	// Finds Pets by tags.
	// (GET /pet/findByTags)
	FindPetsByTags(w http.ResponseWriter, r *http.Request, params FindPetsByTagsParams)
	// Deletes a pet.
	// (DELETE /pet/{petId})
	DeletePet(w http.ResponseWriter, r *http.Request, petId int64, params DeletePetParams)
	// Find pet by ID.
	// (GET /pet/{petId})
	GetPetById(w http.ResponseWriter, r *http.Request, petId int64)
	// Updates a pet in the store with form data.
	// (POST /pet/{petId})
	UpdatePetWithForm(w http.ResponseWriter, r *http.Request, petId int64, params UpdatePetWithFormParams)
	// Uploads an image.
	// (POST /pet/{petId}/uploadImage)
	UploadFile(w http.ResponseWriter, r *http.Request, petId int64, params UploadFileParams)
	// Returns pet inventories by status.
	// (GET /store/inventory)
	GetInventory(w http.ResponseWriter, r *http.Request)
	// Place an order for a pet.
	// (POST /store/order)
	PlaceOrder(w http.ResponseWriter, r *http.Request)
	// Delete purchase order by identifier.
	// (DELETE /store/order/{orderId})
	DeleteOrder(w http.ResponseWriter, r *http.Request, orderId int64)
	// Find purchase order by ID.
	// (GET /store/order/{orderId})
	GetOrderById(w http.ResponseWriter, r *http.Request, orderId int64)
	// Create user.
	// (POST /user)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Creates list of users with given input array.
	// (POST /user/createWithList)
	CreateUsersWithListInput(w http.ResponseWriter, r *http.Request)
	// Logs user into the system.
	// (GET /user/login)
	LoginUser(w http.ResponseWriter, r *http.Request, params LoginUserParams)
	// Logs out current logged in user session.
	// (GET /user/logout)
	LogoutUser(w http.ResponseWriter, r *http.Request)
	// Delete user resource.
	// (DELETE /user/{username})
	DeleteUser(w http.ResponseWriter, r *http.Request, username string)
	// Get user by user name.
	// (GET /user/{username})
	GetUserByName(w http.ResponseWriter, r *http.Request, username string)
	// Update user resource.
	// (PUT /user/{username})
	UpdateUser(w http.ResponseWriter, r *http.Request, username string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePet operation middleware
func (siw *ServerInterfaceWrapper) UpdatePet(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FindPetsByStatus operation middleware
func (siw *ServerInterfaceWrapper) FindPetsByStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsByStatusParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPetsByStatus(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FindPetsByTags operation middleware
func (siw *ServerInterfaceWrapper) FindPetsByTags(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsByTagsParams

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPetsByTags(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeletePetParams

	headers := r.Header

	// ------------- Optional header parameter "api_key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("api_key")]; found {
		var ApiKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "api_key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "api_key", valueList[0], &ApiKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "api_key", Err: err})
			return
		}

		params.ApiKey = &ApiKey

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePet(w, r, petId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPetById operation middleware
func (siw *ServerInterfaceWrapper) GetPetById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPetById(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePetWithForm operation middleware
func (siw *ServerInterfaceWrapper) UpdatePetWithForm(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdatePetWithFormParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePetWithForm(w, r, petId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadFile operation middleware
func (siw *ServerInterfaceWrapper) UploadFile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadFileParams

	// ------------- Optional query parameter "additionalMetadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "additionalMetadata", r.URL.Query(), &params.AdditionalMetadata)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "additionalMetadata", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadFile(w, r, petId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetInventory operation middleware
func (siw *ServerInterfaceWrapper) GetInventory(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInventory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PlaceOrder operation middleware
func (siw *ServerInterfaceWrapper) PlaceOrder(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PlaceOrder(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteOrder operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrder(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId int64

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", r.PathValue("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteOrder(w, r, orderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOrderById operation middleware
func (siw *ServerInterfaceWrapper) GetOrderById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId int64

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", r.PathValue("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrderById(w, r, orderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUsersWithListInput operation middleware
func (siw *ServerInterfaceWrapper) CreateUsersWithListInput(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUsersWithListInput(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LoginUserParams

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Optional query parameter "password" -------------

	err = runtime.BindQueryParameter("form", true, false, "password", r.URL.Query(), &params.Password)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "password", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", r.PathValue("username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserByName operation middleware
func (siw *ServerInterfaceWrapper) GetUserByName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", r.PathValue("username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserByName(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", r.PathValue("username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/pet", wrapper.AddPet)
	m.HandleFunc("PUT "+options.BaseURL+"/pet", wrapper.UpdatePet)
	m.HandleFunc("GET "+options.BaseURL+"/pet/findByStatus", wrapper.FindPetsByStatus)
	m.HandleFunc("GET "+options.BaseURL+"/pet/findByTags", wrapper.FindPetsByTags)
	m.HandleFunc("DELETE "+options.BaseURL+"/pet/{petId}", wrapper.DeletePet)
	m.HandleFunc("GET "+options.BaseURL+"/pet/{petId}", wrapper.GetPetById)
	m.HandleFunc("POST "+options.BaseURL+"/pet/{petId}", wrapper.UpdatePetWithForm)
	m.HandleFunc("POST "+options.BaseURL+"/pet/{petId}/uploadImage", wrapper.UploadFile)
	m.HandleFunc("GET "+options.BaseURL+"/store/inventory", wrapper.GetInventory)
	m.HandleFunc("POST "+options.BaseURL+"/store/order", wrapper.PlaceOrder)
	m.HandleFunc("DELETE "+options.BaseURL+"/store/order/{orderId}", wrapper.DeleteOrder)
	m.HandleFunc("GET "+options.BaseURL+"/store/order/{orderId}", wrapper.GetOrderById)
	m.HandleFunc("POST "+options.BaseURL+"/user", wrapper.CreateUser)
	m.HandleFunc("POST "+options.BaseURL+"/user/createWithList", wrapper.CreateUsersWithListInput)
	m.HandleFunc("GET "+options.BaseURL+"/user/login", wrapper.LoginUser)
	m.HandleFunc("GET "+options.BaseURL+"/user/logout", wrapper.LogoutUser)
	m.HandleFunc("DELETE "+options.BaseURL+"/user/{username}", wrapper.DeleteUser)
	m.HandleFunc("GET "+options.BaseURL+"/user/{username}", wrapper.GetUserByName)
	m.HandleFunc("PUT "+options.BaseURL+"/user/{username}", wrapper.UpdateUser)

	return m
}

type AddPetRequestObject struct {
	Body *AddPetJSONRequestBody
}

type AddPetResponseObject interface {
	VisitAddPetResponse(w http.ResponseWriter) error
}

type AddPet200JSONResponse Pet

func (response AddPet200JSONResponse) VisitAddPetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddPet400Response struct {
}

func (response AddPet400Response) VisitAddPetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AddPet422Response struct {
}

func (response AddPet422Response) VisitAddPetResponse(w http.ResponseWriter) error {
	w.WriteHeader(422)
	return nil
}

type AddPetdefaultResponse struct {
	StatusCode int
}

func (response AddPetdefaultResponse) VisitAddPetResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type UpdatePetRequestObject struct {
	Body *UpdatePetJSONRequestBody
}

type UpdatePetResponseObject interface {
	VisitUpdatePetResponse(w http.ResponseWriter) error
}

type UpdatePet200JSONResponse Pet

func (response UpdatePet200JSONResponse) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePet400Response struct {
}

func (response UpdatePet400Response) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdatePet404Response struct {
}

func (response UpdatePet404Response) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdatePet422Response struct {
}

func (response UpdatePet422Response) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(422)
	return nil
}

type UpdatePetdefaultResponse struct {
	StatusCode int
}

func (response UpdatePetdefaultResponse) VisitUpdatePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type FindPetsByStatusRequestObject struct {
	Params FindPetsByStatusParams
}

type FindPetsByStatusResponseObject interface {
	VisitFindPetsByStatusResponse(w http.ResponseWriter) error
}

type FindPetsByStatus200JSONResponse []Pet

func (response FindPetsByStatus200JSONResponse) VisitFindPetsByStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindPetsByStatus400Response struct {
}

func (response FindPetsByStatus400Response) VisitFindPetsByStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FindPetsByStatusdefaultResponse struct {
	StatusCode int
}

func (response FindPetsByStatusdefaultResponse) VisitFindPetsByStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type FindPetsByTagsRequestObject struct {
	Params FindPetsByTagsParams
}

type FindPetsByTagsResponseObject interface {
	VisitFindPetsByTagsResponse(w http.ResponseWriter) error
}

type FindPetsByTags200JSONResponse []Pet

func (response FindPetsByTags200JSONResponse) VisitFindPetsByTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindPetsByTags400Response struct {
}

func (response FindPetsByTags400Response) VisitFindPetsByTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FindPetsByTagsdefaultResponse struct {
	StatusCode int
}

func (response FindPetsByTagsdefaultResponse) VisitFindPetsByTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeletePetRequestObject struct {
	PetId  int64 `json:"petId"`
	Params DeletePetParams
}

type DeletePetResponseObject interface {
	VisitDeletePetResponse(w http.ResponseWriter) error
}

type DeletePet200Response struct {
}

func (response DeletePet200Response) VisitDeletePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeletePet400Response struct {
}

func (response DeletePet400Response) VisitDeletePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeletePetdefaultResponse struct {
	StatusCode int
}

func (response DeletePetdefaultResponse) VisitDeletePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetPetByIdRequestObject struct {
	PetId int64 `json:"petId"`
}

type GetPetByIdResponseObject interface {
	VisitGetPetByIdResponse(w http.ResponseWriter) error
}

type GetPetById200JSONResponse Pet

func (response GetPetById200JSONResponse) VisitGetPetByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPetById400Response struct {
}

func (response GetPetById400Response) VisitGetPetByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetPetById404Response struct {
}

func (response GetPetById404Response) VisitGetPetByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetPetByIddefaultResponse struct {
	StatusCode int
}

func (response GetPetByIddefaultResponse) VisitGetPetByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type UpdatePetWithFormRequestObject struct {
	PetId  int64 `json:"petId"`
	Params UpdatePetWithFormParams
}

type UpdatePetWithFormResponseObject interface {
	VisitUpdatePetWithFormResponse(w http.ResponseWriter) error
}

type UpdatePetWithForm200JSONResponse Pet

func (response UpdatePetWithForm200JSONResponse) VisitUpdatePetWithFormResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePetWithForm400Response struct {
}

func (response UpdatePetWithForm400Response) VisitUpdatePetWithFormResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdatePetWithFormdefaultResponse struct {
	StatusCode int
}

func (response UpdatePetWithFormdefaultResponse) VisitUpdatePetWithFormResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type UploadFileRequestObject struct {
	PetId  int64 `json:"petId"`
	Params UploadFileParams
	Body   io.Reader
}

type UploadFileResponseObject interface {
	VisitUploadFileResponse(w http.ResponseWriter) error
}

type UploadFile200JSONResponse ApiResponse

func (response UploadFile200JSONResponse) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UploadFile400Response struct {
}

func (response UploadFile400Response) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UploadFile404Response struct {
}

func (response UploadFile404Response) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UploadFiledefaultResponse struct {
	StatusCode int
}

func (response UploadFiledefaultResponse) VisitUploadFileResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetInventoryRequestObject struct {
}

type GetInventoryResponseObject interface {
	VisitGetInventoryResponse(w http.ResponseWriter) error
}

type GetInventory200JSONResponse map[string]int32

func (response GetInventory200JSONResponse) VisitGetInventoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInventorydefaultResponse struct {
	StatusCode int
}

func (response GetInventorydefaultResponse) VisitGetInventoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type PlaceOrderRequestObject struct {
	Body *PlaceOrderJSONRequestBody
}

type PlaceOrderResponseObject interface {
	VisitPlaceOrderResponse(w http.ResponseWriter) error
}

type PlaceOrder200JSONResponse Order

func (response PlaceOrder200JSONResponse) VisitPlaceOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PlaceOrder400Response struct {
}

func (response PlaceOrder400Response) VisitPlaceOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PlaceOrder422Response struct {
}

func (response PlaceOrder422Response) VisitPlaceOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(422)
	return nil
}

type PlaceOrderdefaultResponse struct {
	StatusCode int
}

func (response PlaceOrderdefaultResponse) VisitPlaceOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeleteOrderRequestObject struct {
	OrderId int64 `json:"orderId"`
}

type DeleteOrderResponseObject interface {
	VisitDeleteOrderResponse(w http.ResponseWriter) error
}

type DeleteOrder200Response struct {
}

func (response DeleteOrder200Response) VisitDeleteOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteOrder400Response struct {
}

func (response DeleteOrder400Response) VisitDeleteOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteOrder404Response struct {
}

func (response DeleteOrder404Response) VisitDeleteOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteOrderdefaultResponse struct {
	StatusCode int
}

func (response DeleteOrderdefaultResponse) VisitDeleteOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetOrderByIdRequestObject struct {
	OrderId int64 `json:"orderId"`
}

type GetOrderByIdResponseObject interface {
	VisitGetOrderByIdResponse(w http.ResponseWriter) error
}

type GetOrderById200JSONResponse Order

func (response GetOrderById200JSONResponse) VisitGetOrderByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOrderById400Response struct {
}

func (response GetOrderById400Response) VisitGetOrderByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetOrderById404Response struct {
}

func (response GetOrderById404Response) VisitGetOrderByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetOrderByIddefaultResponse struct {
	StatusCode int
}

func (response GetOrderByIddefaultResponse) VisitGetOrderByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser200JSONResponse User

func (response CreateUser200JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserdefaultResponse struct {
	StatusCode int
}

func (response CreateUserdefaultResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type CreateUsersWithListInputRequestObject struct {
	Body *CreateUsersWithListInputJSONRequestBody
}

type CreateUsersWithListInputResponseObject interface {
	VisitCreateUsersWithListInputResponse(w http.ResponseWriter) error
}

type CreateUsersWithListInput200JSONResponse User

func (response CreateUsersWithListInput200JSONResponse) VisitCreateUsersWithListInputResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateUsersWithListInputdefaultResponse struct {
	StatusCode int
}

func (response CreateUsersWithListInputdefaultResponse) VisitCreateUsersWithListInputResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type LoginUserRequestObject struct {
	Params LoginUserParams
}

type LoginUserResponseObject interface {
	VisitLoginUserResponse(w http.ResponseWriter) error
}

type LoginUser200ResponseHeaders struct {
	XExpiresAfter time.Time
	XRateLimit    int32
}

type LoginUser200JSONResponse struct {
	Body    string
	Headers LoginUser200ResponseHeaders
}

func (response LoginUser200JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Expires-After", fmt.Sprint(response.Headers.XExpiresAfter))
	w.Header().Set("X-Rate-Limit", fmt.Sprint(response.Headers.XRateLimit))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type LoginUser400Response struct {
}

func (response LoginUser400Response) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type LoginUserdefaultResponse struct {
	StatusCode int
}

func (response LoginUserdefaultResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type LogoutUserRequestObject struct {
}

type LogoutUserResponseObject interface {
	VisitLogoutUserResponse(w http.ResponseWriter) error
}

type LogoutUser200Response struct {
}

func (response LogoutUser200Response) VisitLogoutUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type LogoutUserdefaultResponse struct {
	StatusCode int
}

func (response LogoutUserdefaultResponse) VisitLogoutUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeleteUserRequestObject struct {
	Username string `json:"username"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser200Response struct {
}

func (response DeleteUser200Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteUser400Response struct {
}

func (response DeleteUser400Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteUser404Response struct {
}

func (response DeleteUser404Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteUserdefaultResponse struct {
	StatusCode int
}

func (response DeleteUserdefaultResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetUserByNameRequestObject struct {
	Username string `json:"username"`
}

type GetUserByNameResponseObject interface {
	VisitGetUserByNameResponse(w http.ResponseWriter) error
}

type GetUserByName200JSONResponse User

func (response GetUserByName200JSONResponse) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByName400Response struct {
}

func (response GetUserByName400Response) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetUserByName404Response struct {
}

func (response GetUserByName404Response) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetUserByNamedefaultResponse struct {
	StatusCode int
}

func (response GetUserByNamedefaultResponse) VisitGetUserByNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type UpdateUserRequestObject struct {
	Username string `json:"username"`
	Body     *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200Response struct {
}

func (response UpdateUser200Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateUser400Response struct {
}

func (response UpdateUser400Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdateUser404Response struct {
}

func (response UpdateUser404Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateUserdefaultResponse struct {
	StatusCode int
}

func (response UpdateUserdefaultResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add a new pet to the store.
	// (POST /pet)
	AddPet(ctx context.Context, request AddPetRequestObject) (AddPetResponseObject, error)
	// Update an existing pet.
	// (PUT /pet)
	UpdatePet(ctx context.Context, request UpdatePetRequestObject) (UpdatePetResponseObject, error)
	// Finds Pets by status.
	// (GET /pet/findByStatus)
	FindPetsByStatus(ctx context.Context, request FindPetsByStatusRequestObject) (FindPetsByStatusResponseObject, error)
	// Finds Pets by tags.
	// (GET /pet/findByTags)
	FindPetsByTags(ctx context.Context, request FindPetsByTagsRequestObject) (FindPetsByTagsResponseObject, error)
	// Deletes a pet.
	// (DELETE /pet/{petId})
	DeletePet(ctx context.Context, request DeletePetRequestObject) (DeletePetResponseObject, error)
	// Find pet by ID.
	// (GET /pet/{petId})
	GetPetById(ctx context.Context, request GetPetByIdRequestObject) (GetPetByIdResponseObject, error)
	// Updates a pet in the store with form data.
	// (POST /pet/{petId})
	UpdatePetWithForm(ctx context.Context, request UpdatePetWithFormRequestObject) (UpdatePetWithFormResponseObject, error)
	// Uploads an image.
	// (POST /pet/{petId}/uploadImage)
	UploadFile(ctx context.Context, request UploadFileRequestObject) (UploadFileResponseObject, error)
	// Returns pet inventories by status.
	// (GET /store/inventory)
	GetInventory(ctx context.Context, request GetInventoryRequestObject) (GetInventoryResponseObject, error)
	// Place an order for a pet.
	// (POST /store/order)
	PlaceOrder(ctx context.Context, request PlaceOrderRequestObject) (PlaceOrderResponseObject, error)
	// Delete purchase order by identifier.
	// (DELETE /store/order/{orderId})
	DeleteOrder(ctx context.Context, request DeleteOrderRequestObject) (DeleteOrderResponseObject, error)
	// Find purchase order by ID.
	// (GET /store/order/{orderId})
	GetOrderById(ctx context.Context, request GetOrderByIdRequestObject) (GetOrderByIdResponseObject, error)
	// Create user.
	// (POST /user)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Creates list of users with given input array.
	// (POST /user/createWithList)
	CreateUsersWithListInput(ctx context.Context, request CreateUsersWithListInputRequestObject) (CreateUsersWithListInputResponseObject, error)
	// Logs user into the system.
	// (GET /user/login)
	LoginUser(ctx context.Context, request LoginUserRequestObject) (LoginUserResponseObject, error)
	// Logs out current logged in user session.
	// (GET /user/logout)
	LogoutUser(ctx context.Context, request LogoutUserRequestObject) (LogoutUserResponseObject, error)
	// Delete user resource.
	// (DELETE /user/{username})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Get user by user name.
	// (GET /user/{username})
	GetUserByName(ctx context.Context, request GetUserByNameRequestObject) (GetUserByNameResponseObject, error)
	// Update user resource.
	// (PUT /user/{username})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// AddPet operation middleware
func (sh *strictHandler) AddPet(w http.ResponseWriter, r *http.Request) {
	var request AddPetRequestObject

	var body AddPetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddPet(ctx, request.(AddPetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddPet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddPetResponseObject); ok {
		if err := validResponse.VisitAddPetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePet operation middleware
func (sh *strictHandler) UpdatePet(w http.ResponseWriter, r *http.Request) {
	var request UpdatePetRequestObject

	var body UpdatePetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePet(ctx, request.(UpdatePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdatePetResponseObject); ok {
		if err := validResponse.VisitUpdatePetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindPetsByStatus operation middleware
func (sh *strictHandler) FindPetsByStatus(w http.ResponseWriter, r *http.Request, params FindPetsByStatusParams) {
	var request FindPetsByStatusRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindPetsByStatus(ctx, request.(FindPetsByStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindPetsByStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindPetsByStatusResponseObject); ok {
		if err := validResponse.VisitFindPetsByStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindPetsByTags operation middleware
func (sh *strictHandler) FindPetsByTags(w http.ResponseWriter, r *http.Request, params FindPetsByTagsParams) {
	var request FindPetsByTagsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindPetsByTags(ctx, request.(FindPetsByTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindPetsByTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindPetsByTagsResponseObject); ok {
		if err := validResponse.VisitFindPetsByTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePet operation middleware
func (sh *strictHandler) DeletePet(w http.ResponseWriter, r *http.Request, petId int64, params DeletePetParams) {
	var request DeletePetRequestObject

	request.PetId = petId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePet(ctx, request.(DeletePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePetResponseObject); ok {
		if err := validResponse.VisitDeletePetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPetById operation middleware
func (sh *strictHandler) GetPetById(w http.ResponseWriter, r *http.Request, petId int64) {
	var request GetPetByIdRequestObject

	request.PetId = petId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPetById(ctx, request.(GetPetByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPetById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPetByIdResponseObject); ok {
		if err := validResponse.VisitGetPetByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePetWithForm operation middleware
func (sh *strictHandler) UpdatePetWithForm(w http.ResponseWriter, r *http.Request, petId int64, params UpdatePetWithFormParams) {
	var request UpdatePetWithFormRequestObject

	request.PetId = petId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePetWithForm(ctx, request.(UpdatePetWithFormRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePetWithForm")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdatePetWithFormResponseObject); ok {
		if err := validResponse.VisitUpdatePetWithFormResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UploadFile operation middleware
func (sh *strictHandler) UploadFile(w http.ResponseWriter, r *http.Request, petId int64, params UploadFileParams) {
	var request UploadFileRequestObject

	request.PetId = petId
	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UploadFile(ctx, request.(UploadFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UploadFileResponseObject); ok {
		if err := validResponse.VisitUploadFileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetInventory operation middleware
func (sh *strictHandler) GetInventory(w http.ResponseWriter, r *http.Request) {
	var request GetInventoryRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetInventory(ctx, request.(GetInventoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInventory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetInventoryResponseObject); ok {
		if err := validResponse.VisitGetInventoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PlaceOrder operation middleware
func (sh *strictHandler) PlaceOrder(w http.ResponseWriter, r *http.Request) {
	var request PlaceOrderRequestObject

	var body PlaceOrderJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PlaceOrder(ctx, request.(PlaceOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PlaceOrder")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PlaceOrderResponseObject); ok {
		if err := validResponse.VisitPlaceOrderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteOrder operation middleware
func (sh *strictHandler) DeleteOrder(w http.ResponseWriter, r *http.Request, orderId int64) {
	var request DeleteOrderRequestObject

	request.OrderId = orderId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOrder(ctx, request.(DeleteOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOrder")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteOrderResponseObject); ok {
		if err := validResponse.VisitDeleteOrderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOrderById operation middleware
func (sh *strictHandler) GetOrderById(w http.ResponseWriter, r *http.Request, orderId int64) {
	var request GetOrderByIdRequestObject

	request.OrderId = orderId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrderById(ctx, request.(GetOrderByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrderById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOrderByIdResponseObject); ok {
		if err := validResponse.VisitGetOrderByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUsersWithListInput operation middleware
func (sh *strictHandler) CreateUsersWithListInput(w http.ResponseWriter, r *http.Request) {
	var request CreateUsersWithListInputRequestObject

	var body CreateUsersWithListInputJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUsersWithListInput(ctx, request.(CreateUsersWithListInputRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUsersWithListInput")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUsersWithListInputResponseObject); ok {
		if err := validResponse.VisitCreateUsersWithListInputResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoginUser operation middleware
func (sh *strictHandler) LoginUser(w http.ResponseWriter, r *http.Request, params LoginUserParams) {
	var request LoginUserRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginUser(ctx, request.(LoginUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginUserResponseObject); ok {
		if err := validResponse.VisitLoginUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LogoutUser operation middleware
func (sh *strictHandler) LogoutUser(w http.ResponseWriter, r *http.Request) {
	var request LogoutUserRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LogoutUser(ctx, request.(LogoutUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LogoutUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LogoutUserResponseObject); ok {
		if err := validResponse.VisitLogoutUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(w http.ResponseWriter, r *http.Request, username string) {
	var request DeleteUserRequestObject

	request.Username = username

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserByName operation middleware
func (sh *strictHandler) GetUserByName(w http.ResponseWriter, r *http.Request, username string) {
	var request GetUserByNameRequestObject

	request.Username = username

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserByName(ctx, request.(GetUserByNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserByName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserByNameResponseObject); ok {
		if err := validResponse.VisitGetUserByNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(w http.ResponseWriter, r *http.Request, username string) {
	var request UpdateUserRequestObject

	request.Username = username

	var body UpdateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx, request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5dZ1OV3DQLzb69v/BQAA//+fJrjqazsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
