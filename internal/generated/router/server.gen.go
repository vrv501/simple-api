//go:build go1.22

// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find closest-matching animal-category
	// (GET /animal-categories)
	FindAnimalCategory(w http.ResponseWriter, r *http.Request, params FindAnimalCategoryParams)
	// Add new animal-category to the store.
	// (POST /animal-categories)
	AddAnimalCategory(w http.ResponseWriter, r *http.Request)
	// Replace existing animal-category data using Id.
	// (PUT /animal-categories/{animalCategoryId})
	ReplaceAnimalCategory(w http.ResponseWriter, r *http.Request, animalCategoryId Id)
	// Delete a pet image.
	// (DELETE /images/{imageId})
	DeletePetImage(w http.ResponseWriter, r *http.Request, imageId ImageId)
	// Get a pet image using ID.
	// (GET /images/{imageId})
	GetImageByID(w http.ResponseWriter, r *http.Request, imageId ImageId)
	// Find Pets using name, status, tags.
	// (GET /pets)
	FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams)
	// Add new pet to the store.
	// (POST /pets)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Delete a pet.
	// (DELETE /pets/{petId})
	DeletePet(w http.ResponseWriter, r *http.Request, petId PetId)
	// Find pet by ID.
	// (GET /pets/{petId})
	GetPetByID(w http.ResponseWriter, r *http.Request, petId PetId)
	// Replace existing pet data using Id.
	// (PUT /pets/{petId})
	ReplacePet(w http.ResponseWriter, r *http.Request, petId PetId)
	// Upload a new image for a pet.
	// (POST /pets/{petId}/images)
	UploadPetImage(w http.ResponseWriter, r *http.Request, petId PetId)
	// Find user orders using status.
	// (GET /store/orders)
	FindOrders(w http.ResponseWriter, r *http.Request, params FindOrdersParams)
	// Place orders for pets.
	// (POST /store/orders)
	PlaceOrders(w http.ResponseWriter, r *http.Request)
	// Delete user order by identifier.
	// (DELETE /store/orders/{orderId})
	DeleteOrder(w http.ResponseWriter, r *http.Request, orderId OrderId)
	// Find user order by ID.
	// (GET /store/orders/{orderId})
	GetOrderByID(w http.ResponseWriter, r *http.Request, orderId OrderId)
	// Delete user resource.
	// (DELETE /users)
	DeleteUser(w http.ResponseWriter, r *http.Request)
	// Get user.
	// (GET /users)
	GetUser(w http.ResponseWriter, r *http.Request)
	// Patch user
	// (PATCH /users)
	PatchUser(w http.ResponseWriter, r *http.Request)
	// Create user.
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FindAnimalCategory operation middleware
func (siw *ServerInterfaceWrapper) FindAnimalCategory(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params FindAnimalCategoryParams

	// ------------- Required query parameter "name" -------------

	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindAnimalCategory(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddAnimalCategory operation middleware
func (siw *ServerInterfaceWrapper) AddAnimalCategory(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddAnimalCategory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReplaceAnimalCategory operation middleware
func (siw *ServerInterfaceWrapper) ReplaceAnimalCategory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "animalCategoryId" -------------
	var animalCategoryId Id

	err = runtime.BindStyledParameterWithOptions("simple", "animalCategoryId", r.PathValue("animalCategoryId"), &animalCategoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "animalCategoryId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceAnimalCategory(w, r, animalCategoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePetImage operation middleware
func (siw *ServerInterfaceWrapper) DeletePetImage(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "imageId" -------------
	var imageId ImageId

	err = runtime.BindStyledParameterWithOptions("simple", "imageId", r.PathValue("imageId"), &imageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "imageId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePetImage(w, r, imageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetImageByID operation middleware
func (siw *ServerInterfaceWrapper) GetImageByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "imageId" -------------
	var imageId ImageId

	err = runtime.BindStyledParameterWithOptions("simple", "imageId", r.PathValue("imageId"), &imageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "imageId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetImageByID(w, r, imageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FindPets operation middleware
func (siw *ServerInterfaceWrapper) FindPets(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPets(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId PetId

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePet(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPetByID operation middleware
func (siw *ServerInterfaceWrapper) GetPetByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId PetId

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPetByID(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReplacePet operation middleware
func (siw *ServerInterfaceWrapper) ReplacePet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId PetId

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplacePet(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadPetImage operation middleware
func (siw *ServerInterfaceWrapper) UploadPetImage(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "petId" -------------
	var petId PetId

	err = runtime.BindStyledParameterWithOptions("simple", "petId", r.PathValue("petId"), &petId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadPetImage(w, r, petId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FindOrders operation middleware
func (siw *ServerInterfaceWrapper) FindOrders(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params FindOrdersParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "afterDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "afterDate", r.URL.Query(), &params.AfterDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "afterDate", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindOrders(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PlaceOrders operation middleware
func (siw *ServerInterfaceWrapper) PlaceOrders(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PlaceOrders(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteOrder operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrder(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId OrderId

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", r.PathValue("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteOrder(w, r, orderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOrderByID operation middleware
func (siw *ServerInterfaceWrapper) GetOrderByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId OrderId

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", r.PathValue("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrderByID(w, r, orderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchUser operation middleware
func (siw *ServerInterfaceWrapper) PatchUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/animal-categories", wrapper.FindAnimalCategory)
	m.HandleFunc("POST "+options.BaseURL+"/animal-categories", wrapper.AddAnimalCategory)
	m.HandleFunc("PUT "+options.BaseURL+"/animal-categories/{animalCategoryId}", wrapper.ReplaceAnimalCategory)
	m.HandleFunc("DELETE "+options.BaseURL+"/images/{imageId}", wrapper.DeletePetImage)
	m.HandleFunc("GET "+options.BaseURL+"/images/{imageId}", wrapper.GetImageByID)
	m.HandleFunc("GET "+options.BaseURL+"/pets", wrapper.FindPets)
	m.HandleFunc("POST "+options.BaseURL+"/pets", wrapper.AddPet)
	m.HandleFunc("DELETE "+options.BaseURL+"/pets/{petId}", wrapper.DeletePet)
	m.HandleFunc("GET "+options.BaseURL+"/pets/{petId}", wrapper.GetPetByID)
	m.HandleFunc("PUT "+options.BaseURL+"/pets/{petId}", wrapper.ReplacePet)
	m.HandleFunc("POST "+options.BaseURL+"/pets/{petId}/images", wrapper.UploadPetImage)
	m.HandleFunc("GET "+options.BaseURL+"/store/orders", wrapper.FindOrders)
	m.HandleFunc("POST "+options.BaseURL+"/store/orders", wrapper.PlaceOrders)
	m.HandleFunc("DELETE "+options.BaseURL+"/store/orders/{orderId}", wrapper.DeleteOrder)
	m.HandleFunc("GET "+options.BaseURL+"/store/orders/{orderId}", wrapper.GetOrderByID)
	m.HandleFunc("DELETE "+options.BaseURL+"/users", wrapper.DeleteUser)
	m.HandleFunc("GET "+options.BaseURL+"/users", wrapper.GetUser)
	m.HandleFunc("PATCH "+options.BaseURL+"/users", wrapper.PatchUser)
	m.HandleFunc("POST "+options.BaseURL+"/users", wrapper.CreateUser)

	return m
}

type AnimalCategoryJSONResponse struct {
	Id   Id                 `json:"id"`
	Name AnimalCategoryName `json:"name"`
}

type GenericJSONResponse struct {
	Message string `json:"message"`
}

type OrderArrayResponseHeaders struct {
	XNextCursor string
}
type OrderArrayJSONResponse struct {
	Body struct {
		// Count Total number of orders
		Count  int     `json:"count"`
		Orders []Order `json:"orders"`
	}

	Headers OrderArrayResponseHeaders
}

type UserJSONResponse UserSchema

type FindAnimalCategoryRequestObject struct {
	Params FindAnimalCategoryParams
}

type FindAnimalCategoryResponseObject interface {
	VisitFindAnimalCategoryResponse(w http.ResponseWriter) error
}

type FindAnimalCategory200JSONResponse struct{ AnimalCategoryJSONResponse }

func (response FindAnimalCategory200JSONResponse) VisitFindAnimalCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindAnimalCategorydefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response FindAnimalCategorydefaultJSONResponse) VisitFindAnimalCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddAnimalCategoryRequestObject struct {
	Body *AddAnimalCategoryJSONRequestBody
}

type AddAnimalCategoryResponseObject interface {
	VisitAddAnimalCategoryResponse(w http.ResponseWriter) error
}

type AddAnimalCategory201JSONResponse struct{ AnimalCategoryJSONResponse }

func (response AddAnimalCategory201JSONResponse) VisitAddAnimalCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddAnimalCategorydefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response AddAnimalCategorydefaultJSONResponse) VisitAddAnimalCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplaceAnimalCategoryRequestObject struct {
	AnimalCategoryId Id `json:"animalCategoryId"`
	Body             *ReplaceAnimalCategoryJSONRequestBody
}

type ReplaceAnimalCategoryResponseObject interface {
	VisitReplaceAnimalCategoryResponse(w http.ResponseWriter) error
}

type ReplaceAnimalCategory200JSONResponse struct{ AnimalCategoryJSONResponse }

func (response ReplaceAnimalCategory200JSONResponse) VisitReplaceAnimalCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceAnimalCategorydefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response ReplaceAnimalCategorydefaultJSONResponse) VisitReplaceAnimalCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeletePetImageRequestObject struct {
	ImageId ImageId `json:"imageId"`
}

type DeletePetImageResponseObject interface {
	VisitDeletePetImageResponse(w http.ResponseWriter) error
}

type DeletePetImage204Response struct {
}

func (response DeletePetImage204Response) VisitDeletePetImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePetImagedefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response DeletePetImagedefaultJSONResponse) VisitDeletePetImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetImageByIDRequestObject struct {
	ImageId ImageId `json:"imageId"`
}

type GetImageByIDResponseObject interface {
	VisitGetImageByIDResponse(w http.ResponseWriter) error
}

type GetImageByID200ImagejpegResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetImageByID200ImagejpegResponse) VisitGetImageByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/jpeg")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetImageByIDdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response GetImageByIDdefaultJSONResponse) VisitGetImageByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type FindPetsRequestObject struct {
	Params FindPetsParams
}

type FindPetsResponseObject interface {
	VisitFindPetsResponse(w http.ResponseWriter) error
}

type FindPets200ResponseHeaders struct {
	XNextCursor string
}

type FindPets200JSONResponse struct {
	Body struct {
		// Count Total number of pets
		Count int               `json:"count"`
		Pets  []PetWithMetadata `json:"pets"`
	}
	Headers FindPets200ResponseHeaders
}

func (response FindPets200JSONResponse) VisitFindPetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Next-Cursor", fmt.Sprint(response.Headers.XNextCursor))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type FindPetsdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response FindPetsdefaultJSONResponse) VisitFindPetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddPetRequestObject struct {
	Body *multipart.Reader
}

type AddPetResponseObject interface {
	VisitAddPetResponse(w http.ResponseWriter) error
}

type AddPet202Response struct {
}

func (response AddPet202Response) VisitAddPetResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type AddPetdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response AddPetdefaultJSONResponse) VisitAddPetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeletePetRequestObject struct {
	PetId PetId `json:"petId"`
}

type DeletePetResponseObject interface {
	VisitDeletePetResponse(w http.ResponseWriter) error
}

type DeletePet204Response struct {
}

func (response DeletePet204Response) VisitDeletePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePetdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response DeletePetdefaultJSONResponse) VisitDeletePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetPetByIDRequestObject struct {
	PetId PetId `json:"petId"`
}

type GetPetByIDResponseObject interface {
	VisitGetPetByIDResponse(w http.ResponseWriter) error
}

type GetPetByID200JSONResponse PetWithMetadata

func (response GetPetByID200JSONResponse) VisitGetPetByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPetByIDdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response GetPetByIDdefaultJSONResponse) VisitGetPetByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplacePetRequestObject struct {
	PetId PetId `json:"petId"`
	Body  *multipart.Reader
}

type ReplacePetResponseObject interface {
	VisitReplacePetResponse(w http.ResponseWriter) error
}

type ReplacePet202Response struct {
}

func (response ReplacePet202Response) VisitReplacePetResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type ReplacePetdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response ReplacePetdefaultJSONResponse) VisitReplacePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UploadPetImageRequestObject struct {
	PetId PetId `json:"petId"`
	Body  *multipart.Reader
}

type UploadPetImageResponseObject interface {
	VisitUploadPetImageResponse(w http.ResponseWriter) error
}

type UploadPetImage202Response struct {
}

func (response UploadPetImage202Response) VisitUploadPetImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type UploadPetImagedefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response UploadPetImagedefaultJSONResponse) VisitUploadPetImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type FindOrdersRequestObject struct {
	Params FindOrdersParams
}

type FindOrdersResponseObject interface {
	VisitFindOrdersResponse(w http.ResponseWriter) error
}

type FindOrders200JSONResponse struct{ OrderArrayJSONResponse }

func (response FindOrders200JSONResponse) VisitFindOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Next-Cursor", fmt.Sprint(response.Headers.XNextCursor))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type FindOrdersdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response FindOrdersdefaultJSONResponse) VisitFindOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PlaceOrdersRequestObject struct {
	Body *PlaceOrdersJSONRequestBody
}

type PlaceOrdersResponseObject interface {
	VisitPlaceOrdersResponse(w http.ResponseWriter) error
}

type PlaceOrders201JSONResponse struct{ OrderArrayJSONResponse }

func (response PlaceOrders201JSONResponse) VisitPlaceOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Next-Cursor", fmt.Sprint(response.Headers.XNextCursor))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PlaceOrdersdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response PlaceOrdersdefaultJSONResponse) VisitPlaceOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteOrderRequestObject struct {
	OrderId OrderId `json:"orderId"`
}

type DeleteOrderResponseObject interface {
	VisitDeleteOrderResponse(w http.ResponseWriter) error
}

type DeleteOrder204Response struct {
}

func (response DeleteOrder204Response) VisitDeleteOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteOrderdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response DeleteOrderdefaultJSONResponse) VisitDeleteOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetOrderByIDRequestObject struct {
	OrderId OrderId `json:"orderId"`
}

type GetOrderByIDResponseObject interface {
	VisitGetOrderByIDResponse(w http.ResponseWriter) error
}

type GetOrderByID200JSONResponse Order

func (response GetOrderByID200JSONResponse) VisitGetOrderByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOrderByIDdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response GetOrderByIDdefaultJSONResponse) VisitGetOrderByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUserRequestObject struct {
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser204Response struct {
}

func (response DeleteUser204Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUserdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response DeleteUserdefaultJSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserRequestObject struct {
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse struct{ UserJSONResponse }

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response GetUserdefaultJSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PatchUserRequestObject struct {
	Body *PatchUserApplicationMergePatchPlusJSONRequestBody
}

type PatchUserResponseObject interface {
	VisitPatchUserResponse(w http.ResponseWriter) error
}

type PatchUser200JSONResponse struct{ UserJSONResponse }

func (response PatchUser200JSONResponse) VisitPatchUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchUserdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response PatchUserdefaultJSONResponse) VisitPatchUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse struct{ UserJSONResponse }

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserdefaultJSONResponse struct {
	Body struct {
		Message string `json:"message"`
	}
	StatusCode int
}

func (response CreateUserdefaultJSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Find closest-matching animal-category
	// (GET /animal-categories)
	FindAnimalCategory(ctx context.Context, request FindAnimalCategoryRequestObject) (FindAnimalCategoryResponseObject, error)
	// Add new animal-category to the store.
	// (POST /animal-categories)
	AddAnimalCategory(ctx context.Context, request AddAnimalCategoryRequestObject) (AddAnimalCategoryResponseObject, error)
	// Replace existing animal-category data using Id.
	// (PUT /animal-categories/{animalCategoryId})
	ReplaceAnimalCategory(ctx context.Context, request ReplaceAnimalCategoryRequestObject) (ReplaceAnimalCategoryResponseObject, error)
	// Delete a pet image.
	// (DELETE /images/{imageId})
	DeletePetImage(ctx context.Context, request DeletePetImageRequestObject) (DeletePetImageResponseObject, error)
	// Get a pet image using ID.
	// (GET /images/{imageId})
	GetImageByID(ctx context.Context, request GetImageByIDRequestObject) (GetImageByIDResponseObject, error)
	// Find Pets using name, status, tags.
	// (GET /pets)
	FindPets(ctx context.Context, request FindPetsRequestObject) (FindPetsResponseObject, error)
	// Add new pet to the store.
	// (POST /pets)
	AddPet(ctx context.Context, request AddPetRequestObject) (AddPetResponseObject, error)
	// Delete a pet.
	// (DELETE /pets/{petId})
	DeletePet(ctx context.Context, request DeletePetRequestObject) (DeletePetResponseObject, error)
	// Find pet by ID.
	// (GET /pets/{petId})
	GetPetByID(ctx context.Context, request GetPetByIDRequestObject) (GetPetByIDResponseObject, error)
	// Replace existing pet data using Id.
	// (PUT /pets/{petId})
	ReplacePet(ctx context.Context, request ReplacePetRequestObject) (ReplacePetResponseObject, error)
	// Upload a new image for a pet.
	// (POST /pets/{petId}/images)
	UploadPetImage(ctx context.Context, request UploadPetImageRequestObject) (UploadPetImageResponseObject, error)
	// Find user orders using status.
	// (GET /store/orders)
	FindOrders(ctx context.Context, request FindOrdersRequestObject) (FindOrdersResponseObject, error)
	// Place orders for pets.
	// (POST /store/orders)
	PlaceOrders(ctx context.Context, request PlaceOrdersRequestObject) (PlaceOrdersResponseObject, error)
	// Delete user order by identifier.
	// (DELETE /store/orders/{orderId})
	DeleteOrder(ctx context.Context, request DeleteOrderRequestObject) (DeleteOrderResponseObject, error)
	// Find user order by ID.
	// (GET /store/orders/{orderId})
	GetOrderByID(ctx context.Context, request GetOrderByIDRequestObject) (GetOrderByIDResponseObject, error)
	// Delete user resource.
	// (DELETE /users)
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Get user.
	// (GET /users)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Patch user
	// (PATCH /users)
	PatchUser(ctx context.Context, request PatchUserRequestObject) (PatchUserResponseObject, error)
	// Create user.
	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// FindAnimalCategory operation middleware
func (sh *strictHandler) FindAnimalCategory(w http.ResponseWriter, r *http.Request, params FindAnimalCategoryParams) {
	var request FindAnimalCategoryRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindAnimalCategory(ctx, request.(FindAnimalCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindAnimalCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindAnimalCategoryResponseObject); ok {
		if err := validResponse.VisitFindAnimalCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddAnimalCategory operation middleware
func (sh *strictHandler) AddAnimalCategory(w http.ResponseWriter, r *http.Request) {
	var request AddAnimalCategoryRequestObject

	var body AddAnimalCategoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddAnimalCategory(ctx, request.(AddAnimalCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddAnimalCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddAnimalCategoryResponseObject); ok {
		if err := validResponse.VisitAddAnimalCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceAnimalCategory operation middleware
func (sh *strictHandler) ReplaceAnimalCategory(w http.ResponseWriter, r *http.Request, animalCategoryId Id) {
	var request ReplaceAnimalCategoryRequestObject

	request.AnimalCategoryId = animalCategoryId

	var body ReplaceAnimalCategoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceAnimalCategory(ctx, request.(ReplaceAnimalCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceAnimalCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceAnimalCategoryResponseObject); ok {
		if err := validResponse.VisitReplaceAnimalCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePetImage operation middleware
func (sh *strictHandler) DeletePetImage(w http.ResponseWriter, r *http.Request, imageId ImageId) {
	var request DeletePetImageRequestObject

	request.ImageId = imageId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePetImage(ctx, request.(DeletePetImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePetImage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePetImageResponseObject); ok {
		if err := validResponse.VisitDeletePetImageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetImageByID operation middleware
func (sh *strictHandler) GetImageByID(w http.ResponseWriter, r *http.Request, imageId ImageId) {
	var request GetImageByIDRequestObject

	request.ImageId = imageId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetImageByID(ctx, request.(GetImageByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetImageByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetImageByIDResponseObject); ok {
		if err := validResponse.VisitGetImageByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindPets operation middleware
func (sh *strictHandler) FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams) {
	var request FindPetsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindPets(ctx, request.(FindPetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindPets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindPetsResponseObject); ok {
		if err := validResponse.VisitFindPetsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddPet operation middleware
func (sh *strictHandler) AddPet(w http.ResponseWriter, r *http.Request) {
	var request AddPetRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddPet(ctx, request.(AddPetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddPet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddPetResponseObject); ok {
		if err := validResponse.VisitAddPetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePet operation middleware
func (sh *strictHandler) DeletePet(w http.ResponseWriter, r *http.Request, petId PetId) {
	var request DeletePetRequestObject

	request.PetId = petId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePet(ctx, request.(DeletePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePetResponseObject); ok {
		if err := validResponse.VisitDeletePetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPetByID operation middleware
func (sh *strictHandler) GetPetByID(w http.ResponseWriter, r *http.Request, petId PetId) {
	var request GetPetByIDRequestObject

	request.PetId = petId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPetByID(ctx, request.(GetPetByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPetByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPetByIDResponseObject); ok {
		if err := validResponse.VisitGetPetByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplacePet operation middleware
func (sh *strictHandler) ReplacePet(w http.ResponseWriter, r *http.Request, petId PetId) {
	var request ReplacePetRequestObject

	request.PetId = petId

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplacePet(ctx, request.(ReplacePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplacePet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplacePetResponseObject); ok {
		if err := validResponse.VisitReplacePetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UploadPetImage operation middleware
func (sh *strictHandler) UploadPetImage(w http.ResponseWriter, r *http.Request, petId PetId) {
	var request UploadPetImageRequestObject

	request.PetId = petId

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UploadPetImage(ctx, request.(UploadPetImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadPetImage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UploadPetImageResponseObject); ok {
		if err := validResponse.VisitUploadPetImageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindOrders operation middleware
func (sh *strictHandler) FindOrders(w http.ResponseWriter, r *http.Request, params FindOrdersParams) {
	var request FindOrdersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindOrders(ctx, request.(FindOrdersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindOrders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindOrdersResponseObject); ok {
		if err := validResponse.VisitFindOrdersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PlaceOrders operation middleware
func (sh *strictHandler) PlaceOrders(w http.ResponseWriter, r *http.Request) {
	var request PlaceOrdersRequestObject

	var body PlaceOrdersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PlaceOrders(ctx, request.(PlaceOrdersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PlaceOrders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PlaceOrdersResponseObject); ok {
		if err := validResponse.VisitPlaceOrdersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteOrder operation middleware
func (sh *strictHandler) DeleteOrder(w http.ResponseWriter, r *http.Request, orderId OrderId) {
	var request DeleteOrderRequestObject

	request.OrderId = orderId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOrder(ctx, request.(DeleteOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOrder")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteOrderResponseObject); ok {
		if err := validResponse.VisitDeleteOrderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOrderByID operation middleware
func (sh *strictHandler) GetOrderByID(w http.ResponseWriter, r *http.Request, orderId OrderId) {
	var request GetOrderByIDRequestObject

	request.OrderId = orderId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrderByID(ctx, request.(GetOrderByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrderByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOrderByIDResponseObject); ok {
		if err := validResponse.VisitGetOrderByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(w http.ResponseWriter, r *http.Request) {
	var request DeleteUserRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(w http.ResponseWriter, r *http.Request) {
	var request GetUserRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx, request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchUser operation middleware
func (sh *strictHandler) PatchUser(w http.ResponseWriter, r *http.Request) {
	var request PatchUserRequestObject

	var body PatchUserApplicationMergePatchPlusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchUser(ctx, request.(PatchUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchUserResponseObject); ok {
		if err := validResponse.VisitPatchUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
