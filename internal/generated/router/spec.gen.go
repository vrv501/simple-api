// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
