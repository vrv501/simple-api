// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"WTLoOgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
