// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
