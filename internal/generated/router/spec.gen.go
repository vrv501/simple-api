// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"h1+/0b/6bwAAAP//VcH4SPM5AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
