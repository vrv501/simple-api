// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"OQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
