// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
