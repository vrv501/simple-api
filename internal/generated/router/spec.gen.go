// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
