// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
