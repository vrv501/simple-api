// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9Rba3PbNtb+Kxg0nUljUjdbbqP3Q2vH077uNokndqY7a3k9MHkkISUJFgAdOx7tb9/B",
	"heINoihbbrpf2ogEgXOecz84fsABi1OWQCIFnjzglHASgwSuf73JuGBc/SsEEXCaSsoSPLHP0YxxlJI5",
	"TYh6jl7OOItRyuGWskwgDiJliYDvsIep+urPDPg99nBCYsATHJjNPSyCBcREnRKTu98gmcsFnhweeDim",
	"Sf5z6GF5n6rPhOQ0mePl0sOnMZnDaai+1AekRC6K/al962EOf2aUQ4gnkmdQPvAFhxme4G/6BQp981b0",
	"T0N9yG80prIJwbssvgGO2AxRCbFAkiEOMuPJGm4jvU357BBmJIsknowGnuKcxlmMJ+OB5tv8GA5WbNNE",
	"why4Juk9D4Gv5ZvZt0/k+wzk2iNS/e6JB3wUwM1+zjOy/PVjj1ntv1SnqT1AyGMWUtC6fZTQmERviIQ5",
	"4/fqScASCYmWNUnTiAZarfufhBL4Q+nUlLMUuLQb5Ty00VI97J2hqszYpdnmaiVvdvMJAmlor2qe2Qvl",
	"myGzEskFkSgBCLUu3gAiYQih+rdcABKScReUd/6c+RbxKpEfDGDYqEINnziLJE0Jl/0Z47EfEqmBgSRg",
	"obJOBVLlowvDVQPXpYfTBZNMNNdq++1/SmGOPQx3acRCMGQrTNZJwx7bJgzFTuXcDYvPzMK6wNRJbnlV",
	"QbaqvpWGkSh6P8OTy80ajpdeAwIixGfGtfHCHYnTSBH4me8fHBzMvxy8OFBOt+Rq9wcVV/uDpyxRAlfK",
	"9u/LI/9fxP8y8F9Ps8FgdPjti29+ejX5P/VjP9D/hf9c7b3ALv9cQSsnqgnZlQO0qmYqRlf6qNea0LJb",
	"Q6ZhF8/l7crgaZg7uy5Wf54FAQgxyyJUdwA5Goq2XyABToMnoBCDEGSuGWyXaL6wC/WWLHR0doo+lMjV",
	"keyIc/IUuQUsSxwR+oJJEqFkFad1XBTal1ibGDajq4ftMqUPKrBvErTmQH1ndyKamTpWhsTV5lsKXJ+B",
	"9M6FsD28AJKT+k//HdxJv0O+poJBAndSJW6AXiZZFCE6QwlDMeOgn4rvKnmKWkJuIsgNs64Vy8c4uM1u",
	"rRURtSQPfIX6r8KCwy+8s0ZbOMSQzUXVEY6qjnC/6giJ/2U69ZHT2Xn4tOZuCRHh4aEMF8Hh/kiOqwcd",
	"jDckt9YymroeQkRvgUN4HRIJTUmf5O/RCZFwQWN4+fHijRKoCtREKr6JBF9SnVltkK3X2SemIK+7rhUL",
	"mqZrOTg3b3dEv5BEZt2M+Nwsdbppy95qvxoTXl0uTQO3Ej1f0bNK/3EakQBCXFd37SuQObCn3FaiSoLL",
	"YnnKmbIHxemKnjIp2MMBSQKIIiiH3QIcm9fVvGkpkG4b4brFxjOQ+fKU08ChA2fqMaIJ+nh+0kNvMyFV",
	"QpsyQSW9BfSZygWKyR0aoRACHQw1KAamlQmOXvdev65ojllctcXhoG6LJaOfTsO9l9NpbzoNH4beaPnd",
	"j07j76ZlZyBzHfOwJPMuH1yoZc5SwSsklePo0roc7Ipzisldq+c72MbzFRlyU44gkU7jBXqZpaoWGQ50",
	"OyCPrNXlb2mCBP0CEzQ89tBbcmd/jcaH/ziuiPaGJoTfI0ME4pByEJBI04dgM6SqBnNyWf7mKxcPMbk7",
	"NTRZdch/1eO6ZtdlxOSWUOOK6nacgrRWrDS6XIzlFl3+VrBorbFeWJ1ZwVcAEpEbTkLGW3X7oJXzcQfO",
	"f6dy8RYkyQu+ok55XCqta7DrjNMqX1UAP344VTJNc2WqaEI/Bdl/0A2JZd/oWv/Btn6WZeFnnLok35q2",
	"UVe54nWoLq9KOVEVGRKGHERNesPRPnpLaILOpYfOU0XbjEIUeujj+VHNUsdVmY7XVGtei8VCTGhUpeAT",
	"WyQ/6ee9gMW1+nDU5iKLI3vX3+75V3s/lZ74V3vTac8+uHoYeUsnQbMsiq6ThpuSLFE2TvgfVYIOW+lp",
	"91bpgiVwbaqC6ml7Q388HvvD0b5/MD78vmZJh61RYu/Hy4H/2r96+N4bjt08ZqV2V8e2VVUZSw2xAq9c",
	"mDXGvJWeNfS3WVmfm6y81pIrgGF/kDmPaTIc7bdGjXFDDgP/9XTqX/fQug6BgCDjVN5rEoyB3ADhwI8y",
	"tWP+6+fciH/9/aLhX3/9/QId62VIsj8gyYsXHSf08+LohZSpKS1oMmOOmnFBBaICESQ090hFsHPlrtE5",
	"8Fvg6IYICBEzjvx9Cokqafd7AyRSCOjMVjwqEZFUavjOP5P5HLjaSjt+5Je/wx6+BS7M8cPeoDc61FVo",
	"CglJKZ7g/d6gd4A1tAsNUJ/ozMu34d/6lTk4SuCfaRKiIGIChPRjIoOFCpfV7+8VrcpDacJVGaM/q3VV",
	"vMrNwGWjG05iUD7abI1KmYmrF/6ktq6zs3JV6wmNBoN1+6zW1XbCut604XzTp3mbRetwFscqregIN85z",
	"v0vcFKSKGykTDlEehSFK4HN9t0p/tynJo7ApyKITfr+e0VKz3IFTDevhV8C6Kx5tWC89hzH1H0iFVpVG",
	"qCieOYTyAXTdgeCOCumQNVJ5EspUiYZOw6Z47PebbM1xO1Kn8WmXMVfPoRVfwwK3F8gm/UhBbvCvyq/b",
	"LZVwPJvse0ht3UOvXh3JCIiQiCXaRyr1LASsok0uuVevnK5YHdDVAacg251uN61Ylegq2631Z0wpc0ui",
	"DERx62QvnQKWCBrqBtSMcTSjkdTxt3J/4yawaK2sSOzUga2W1bV0vhHgyVzfjxnC0M19N9q0lmwBXl62",
	"uxcWkuzbjm2HleYeel2ke97WeWo0sL1xnltKV6FVasmuDXR9yJbtc5XD/Z2b57vIOtqdUMnPGQA3phmq",
	"2N6YWpxpZ7N15LD3rzU1HrnCq/4MHQUBpBLCHaYNLv5qEOXeP+8u2PY7rGm7gwRE1L5NqMxbg1bNi28w",
	"ejOE4TD6A3ezzdC3C6DqHDX0xxkQP+gRGF0/0WQegRuPX0CegTy+Pz3ZHSCDnV0/NVzTRufSuIjajU0r",
	"Hb25R6cnbvvtlJCqPboloU9Vz/8hJ9ANpQ3uwDYbdUx1utKPacRIiIj2N3qxjiFrfIRZrQC1Lc4dSWLL",
	"oZ3dzuI8dcLGPHaF+06qk6sMKs0yPVF1Ngm1m9KUOtQdg4o5qyW0PEltNmef+ahl91BkwHmegFSg0S0s",
	"/aIywOLD3MxPnKFJs3p8f2ZnHP96QOuhrGR8lSD2XNdhrfFuh0GuTSoOO9J5Wr8Yz1lfkWd6OkQvtJsW",
	"t+jN8vp9PhfUWmD/7creyszC5sL3Z1PwWlTMDAEiM/VMLqhAq6mKfN7CRatef2ImHgpynZMZjV7/X1YK",
	"t6tiaeJsR2lam7blapzPfa2tu850QqKCit2pfFXc1Fu9fKW460N+exa80rPGCO1p2HGIuzYQe+q8MO1+",
	"ve6cnt2+27xTIRvRWLHoP3kA6RZu3Uv1H+wsfi3Mu0K4mffaNtzkfwnQLSybOcKdh+TCAFS5QkNIJJ1R",
	"4GsMwPrtRtzV1D2qKGxBYXdloR307DCoues6sIpvNT5WdE8trBQkVYzfcCAS9FjCIwo2O2z+CGvMv3wc",
	"FvaGGE8ur8rIGGY0NmU8DAQlOPoP+b15ByO02GynfcWFfScj1KOrz2ODHATLeAAuQFoy48xQJAmNiuvt",
	"HDVniqx4ODZ3r7tEa/DculRJPTXbN/fm/zmrTdhsn8XZM9mFvuzGDP866PLmyUaNq1lvdbLj8kpxL/RM",
	"hSvdjlhAIj+EW+zhjEd2dGPS7+sXCybk5If9waBPUtq/HWoo7/xST7/4s8T/1w+/fp9/+d8AAAD//+vH",
	"UARrOQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
