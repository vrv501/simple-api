// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"IIQ5AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
