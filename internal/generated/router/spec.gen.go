// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
