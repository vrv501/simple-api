// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9hIlOQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
