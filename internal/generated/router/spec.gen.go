// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Fu9XA/g6AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
