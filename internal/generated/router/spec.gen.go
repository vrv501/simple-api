// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
