// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"TSU5AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
