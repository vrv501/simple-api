// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"h/3JvPo3AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
