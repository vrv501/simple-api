// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
