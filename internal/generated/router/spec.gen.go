// Package genRouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package genRouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
