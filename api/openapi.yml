---
openapi: 3.0.4
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: This is a sample Pet Store Server based on the OpenAPI 3.0 specification.
  version: 1.0.26
servers:
  - url: "/api/v1"
security:
  - bearerAuth: []
x-headers:
  paginationHeader: &paginationHeader
    X-Next-Cursor: 
      description: "Cursor for the next page (null if no more pages)"
      schema:
        type: string
        nullable: true
paths:
  "/animal-categories":
    get:
      tags:
        - animal-categories
      summary: Find animal-category using name
      description: Find animal-category using name. 
      operationId: findAnimalCategory
      parameters:
        - name: name
          in: query
          required: true
          description: Name of animal category
          schema:
            "$ref": "#/components/schemas/AnimalCategoryName"
      responses:
        "200":
          "$ref": "#/components/responses/AnimalCategoryResponse"
        default:
          "$ref": "#/components/responses/ApiResponse"
    post:
      tags:
        - animal-categories
      summary: Add new animal-category to the store.
      description: Add new animal-category to the store.
      operationId: addAnimalCategory
      requestBody:
        "$ref": "#/components/requestBodies/AnimalCategoryRequest"
      responses:
        "201":
          "$ref": "#/components/responses/AnimalCategoryResponse"
        default:
          "$ref": "#/components/responses/ApiResponse"
  "/animal-categories/{animalCategoryId}":
    put:
      tags:
        - animal-categories
      summary: Replace existing animal-category data using Id.
      description: Replace existing animal-category data using Id.
      operationId: replaceAnimalCategory
      parameters:
        - "$ref": "#/components/parameters/AnimalCategoryIdParameter"
      requestBody:
        "$ref": "#/components/requestBodies/AnimalCategoryRequest"
      responses:
        "200":
          "$ref": "#/components/responses/AnimalCategoryResponse"
        default:
          "$ref": "#/components/responses/ApiResponse"
    delete:
      tags:
        - animal-categories
      summary: Delete an animal-category.
      description: Delete an animal-category.
      operationId: deleteAnimalCategory
      parameters:
        - "$ref": "#/components/parameters/AnimalCategoryIdParameter"
      responses:
        "200":
          description: Animal-category deleted
        default:
          "$ref": "#/components/responses/ApiResponse"
  "/pets":
    get:
      tags:
        - pets
      summary: Find Pets using name, status, tags.
      description: Find Pets using name, status, tags. **Atleast one of the parameters is required**
      operationId: findPets
      parameters:
        - name: name
          in: query
          required: false
          description: Name of pet
          schema:
            "$ref": "#/components/schemas/PetName"
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: array 
            items:
              "$ref": "#/components/schemas/PetStatus"
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            "$ref": "#/components/schemas/PetTags"
        - "$ref": "#/components/parameters/Cursor"
        - "$ref": "#/components/parameters/Limit"
      responses:
        "200":
          "$ref": "#/components/responses/PetResponseArray"
        default:
          "$ref": "#/components/responses/ApiResponse"
    post:
      tags:
        - pets
      summary: Add new pet to the store.
      description: Add new pet to the store.
      operationId: addPet
      requestBody:
        "$ref": "#/components/requestBodies/PetRequest"
      responses:
        "202":
          description: "Request Accepted"
        default:
          "$ref": "#/components/responses/ApiResponse"
  "/pets/{petId}":
    get:
      tags:
        - pets
      summary: Find pet by ID.
      description: Returns a single pet.
      operationId: getPetById
      parameters:
        - "$ref": "#/components/parameters/PetIdParameter"
      responses:
        "200":
          "$ref": "#/components/responses/PetResponse"                
        default:
          "$ref": "#/components/responses/ApiResponse"
    put:
      tags:
        - pets
      summary: Replace existing pet data using Id.
      description: Replace existing pet data using Id.
      operationId: replacePet
      parameters:
        - "$ref": "#/components/parameters/PetIdParameter"
      requestBody:
        "$ref": "#/components/requestBodies/PetRequest"
      responses:
        "202":
          description: "Request Accepted"
        default:
          "$ref": "#/components/responses/ApiResponse"
    delete:
      tags:
        - pets
      summary: Delete a pet.
      description: Delete a pet.
      operationId: deletePet
      parameters:
        - "$ref": "#/components/parameters/PetIdParameter"
      responses:
        "200":
          description: Pet deleted
        default:
          "$ref": "#/components/responses/ApiResponse"
  "/pets/{petId}/images":
    post:
      tags:
        - pets
      summary: Upload a new image for a pet.
      description: Upload a new image for a pet.
      operationId: uploadPetImage
      parameters:
        - "$ref": "#/components/parameters/PetIdParameter"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - photos
              properties:
                photos: 
                  "$ref": "#/components/schemas/PetPhotos"
            encoding:
              photos:
                contentType: image/jpeg
                explode: true
      responses:
        "202":
          description: "Accepted Request"
        default:
          "$ref": "#/components/responses/ApiResponse"
  "/pets/{petId}/images/{imageId}":
    get:
      tags:
        - pets
      summary: Get a pet image using ID.
      description: Get a pet image using ID.
      operationId: getImageByPetId
      parameters:
        - "$ref": "#/components/parameters/PetIdParameter"
        - "$ref": "#/components/parameters/ImageIdParameter"
      responses:
        "200":
          description: Successful response
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
                example: binary string representation of jpeg image
        default:
          "$ref": "#/components/responses/ApiResponse"
    delete:
      tags:
        - pets
      summary: Delete a pet image.
      description: Delete a pet image.
      operationId: deletePetImage
      parameters:
        - "$ref": "#/components/parameters/PetIdParameter"
        - "$ref": "#/components/parameters/ImageIdParameter"
      responses:
        "200":
          description: Pet image deleted
        default:
          "$ref": "#/components/responses/ApiResponse"
  "/store/orders":
    get:
      tags:
        - orders
      summary: Find user orders using status.
      description: Find user orders using status.
      operationId: findOrders
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: array 
            items:
              "$ref": "#/components/schemas/OrderStatus"
        - name: afterDate
          in: query
          description: Filter orders placed after this date
          required: false
          schema:
            type: string
            format: date-time
        - "$ref": "#/components/parameters/Cursor"
        - "$ref": "#/components/parameters/Limit"
      responses:
        "200":
          "$ref": "#/components/responses/OrderResponseArray"
        default:
          "$ref": "#/components/responses/ApiResponse"
    post:
      tags:
        - orders
      summary: Place orders for pets.
      description: Place new orders in the store.
      operationId: placeOrders
      requestBody:
        "$ref": "#/components/requestBodies/OrderRequest"
      responses:
        "201":
          "$ref": "#/components/responses/OrderResponseArray"
        default:
          "$ref": "#/components/responses/ApiResponse"
  "/store/orders/{orderId}":
    get:
      tags:
        - orders
      summary: Find user order by ID.
      operationId: getOrderById
      parameters: 
        - "$ref": "#/components/parameters/OrderIdParameter"
      responses:
        "200":
          "$ref": "#/components/responses/OrderResponse"
        default:
          "$ref": "#/components/responses/ApiResponse"
    delete:
      tags:
        - orders
      summary: Delete user order by identifier.
      operationId: deleteOrder
      parameters:
        - "$ref": "#/components/parameters/OrderIdParameter"
      responses:
        "200":
          description: Order deleted
        default:
          "$ref": "#/components/responses/ApiResponse"
  "/users":
    post:
      tags:
        - users
      summary: Create user.
      operationId: createUser
      requestBody:
        "$ref": "#/components/requestBodies/UserRequest"
      responses:
        "201":
          "$ref": "#/components/responses/UserResponse"
        default:
          "$ref": "#/components/responses/ApiResponse"
      security: []
  "/users/{username}":
    get:
      tags:
        - users
      summary: Get user by user name.
      description: Get user detail based on username.
      operationId: getUserByName
      parameters:
        - "$ref": "#/components/parameters/UsernameParameter"
      responses:
        "200":
          "$ref": "#/components/responses/UserResponse"
        default:
          "$ref": "#/components/responses/ApiResponse"
    put:
      tags:
        - users
      summary: Replace user resource.
      operationId: replaceUser
      parameters:
        - "$ref": "#/components/parameters/UsernameParameter"
      requestBody:
        "$ref": "#/components/requestBodies/UserRequest"
      responses:
        "200":
          "$ref": "#/components/responses/UserResponse"
        default:
          "$ref": "#/components/responses/ApiResponse"
    delete:
      tags:
        - users
      summary: Delete user resource.
      operationId: deleteUser
      parameters:
        - "$ref": "#/components/parameters/UsernameParameter"
      responses:
        "200":
          description: Order deleted
        default:
          "$ref": "#/components/responses/ApiResponse"
components:
  schemas:
    Id: 
      type: string
      minLength: 1
      maxLength: 45
      example: "aasd66tdhc632t5"
    PetName:
      type: string
      example: max
      minLength: 1
      maxLength: 100
      pattern: "^[a-z\\- ]+$"
    AnimalCategoryName:
      type: string
      example: dogs
      minLength: 1
      maxLength: 100
      pattern: "^[a-z0-9\\- ]+$"
    PetTags: 
      type: array
      minItems: 1
      maxItems: 50
      items:
        type: string
        example: labrador
        minLength: 1
        maxLength: 20
    PetStatus:
      type: string
      description: pet status in the store
      default: available
      enum:
        - available
        - sold      
    Pet:
      required:
        - name
        - category_id
        - price
      type: object
      properties:
        name:
          "$ref": "#/components/schemas/PetName"
        price:
          type: string
          format: decimal
          pattern: "^\\d+(\\.\\d{1,2})?$"
          example: "29.99"
          minLength: 1
          description: "Price in USD. Must be positive with max 2 decimal places."
        category_id:
          type: string
          example: "x3274y237d63276"
          minLength: 1
          maxLength: 45
        tags:
          "$ref": "#/components/schemas/PetTags"
        status:
          "$ref": "#/components/schemas/PetStatus"
    PetPhotos:
      type: array
      description: Pet images (up to 10)
      minItems: 1
      maxItems: 10
      items:
        type: string
        description: "Min size: 1B, Max size: 256KB"
        format: binary
        example: binary string representation of jpeg image
    PetResp:
      allOf:
        - type: object
          properties:
            id:
              "$ref": "#/components/schemas/Id"
            photo_uris:
              type: array
              items:
                description: URI of pet image
                type: string
                format: uri
                example: /pet/{petId}/images/{imageId}
        - "$ref": "#/components/schemas/Pet"
        - "$ref": "#/components/schemas/DateTimeMetadata"
    OrderStatus:
      type: string
      description: order status.
      default: placed
      enum:
        - placed
        - in-progress
        - delivered 
    OrderResp: 
      allOf:
        - type: object
          properties:
            id:
              "$ref": "#/components/schemas/Id"
            pet_id:
              "$ref": "#/components/schemas/Id"
            status:
              "$ref": "#/components/schemas/OrderStatus"
            shipped_date:
              type: string
              format: date-time
              nullable: true
        - "$ref": "#/components/schemas/DateTimeMetadata"
    DateTimeMetadata:
      type: object 
      properties:
        created_at:
          type: string
          format: date-time
          description: Date when the pet was created in the store
        updated_at:
          type: string
          format: date-time
          nullable: true
          description: Date when the pet was last updated
    Username:
      type: string
      example: okagrmin123
      pattern: "^[a-z0-9\\-_. ]+$"
      minLength: 1
      maxLength: 150
    User:
      type: object
      required:
        - username
        - full_name
        - email
        - phone_number
      properties:
        username:
          "$ref": "#/components/schemas/Username"
        full_name:
          type: string
          example: Tony Stark
          pattern: "^[a-z\\- ]+$"
          minLength: 1
          maxLength: 150
        email:
          type: string
          example: john@email.com
          pattern: "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$"
          minLength: 1
          maxLength: 320
        phone_number:
          type: string
          pattern: "^\\+?[0-9-]{7,15}$"
          minLength: 1
          maxLength: 16
          example: "+1-555-123-4567"
  requestBodies:
    AnimalCategoryRequest:
      description: Animal Category object that needs to be added to the store
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties: 
              name:
                "$ref": "#/components/schemas/AnimalCategoryName"
    PetRequest:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - pet
            properties: 
              pet:
                "$ref": "#/components/schemas/Pet"
              photos: 
                "$ref": "#/components/schemas/PetPhotos"
          encoding:
            pet:
              contentType: application/json
            photos:
              contentType: image/jpeg
              explode: true
    OrderRequest:
      required: true
      content:
        application/json:
          schema:
            type: array 
            minItems: 1
            maxItems: 10
            items:
              type: object
              required:
                - petId
              properties:
                petId:
                  "$ref": "#/components/schemas/Id"
    UserRequest:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - "$ref": "#/components/schemas/User"
              - type: object
                required:
                  - password
                properties:
                  password:
                    type: string
                    example: "wr34^44gz4$4r"
                    minLength: 1
                    maxLength: 320         
  responses:
    AnimalCategoryResponse: 
      description: "Successful Animal Category response"
      content:
        application/json:
          schema: 
            allOf:
              - type: object
                properties:
                  id:
                    "$ref": "#/components/schemas/Id"
                  name: 
                    "$ref": "#/components/schemas/AnimalCategoryName"
              - "$ref": "#/components/schemas/DateTimeMetadata"
    PetResponse: 
      description: "Successful Pet object response"
      content:
        application/json:
          schema: 
            "$ref": "#/components/schemas/PetResp"
    PetResponseArray:
      description: "Successful Pet array response"
      headers: *paginationHeader
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: integer
                description: Total number of pets
                example: 1
              pets:
                type: array
                items:
                  "$ref": "#/components/schemas/PetResp"
    OrderResponse:
      description: "Successful Order response"
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/OrderResp"
    OrderResponseArray:
      description: "Successful Order array response"
      headers: *paginationHeader
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: integer
                description: Total number of orders
                example: 1
              orders:
                type: array
                items:
                  "$ref": "#/components/schemas/OrderResp"
    UserResponse:
      description: "Successful User object response"
      content:
        application/json:
          schema:
            allOf:
              - "$ref": "#/components/schemas/User"
              - "$ref": "#/components/schemas/DateTimeMetadata"
    ApiResponse:
      description: "Generic API Response"
      content:
        application/json:
          schema:
            type: object
            properties:
              action:
                type: string
              message:
                type: string
  parameters:
    AnimalCategoryIdParameter:
      name: animalCategoryId
      in: path
      required: true
      schema:
        "$ref": "#/components/schemas/Id"    
    PetIdParameter:
      name: petId
      in: path
      required: true
      schema:
        "$ref": "#/components/schemas/Id"
    ImageIdParameter:
      name: imageId
      in: path
      required: true
      schema:
        "$ref": "#/components/schemas/Id"
    OrderIdParameter:
      name: orderId
      in: path
      required: true
      schema:
        "$ref": "#/components/schemas/Id"
    UsernameParameter:
      name: username
      in: path
      required: true
      schema:
        "$ref": "#/components/schemas/Username"
    Cursor:
      name: cursor
      in: query
      description: Cursor for pagination (from previous response)
      required: false
      schema:
        type: string
        minLength: 1
        maxLength: 1000
    Limit:
      name: limit
      in: query
      description: Number of items to return
      required: false
      schema:
        type: integer
        minimum: 10
        maximum: 50
        default: 20
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer          
      bearerFormat: JWT 
      description: "JWT Bearer token"
