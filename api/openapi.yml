---
openapi: 3.0.4
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: This is a sample Pet Store Server based on the OpenAPI 3.0 specification.
  version: 1.0.26
servers:
  - url: "/api/v1"
security:
  - bearerAuth: []
paths:
  "/pet":
    get:
      tags:
        - pet
      summary: Find Pets using name, status, tags.
      description: Find Pets using name, status, tags. **Atleast one of the parameters is required**
      operationId: findPets
      parameters:
        - name: name
          in: query
          required: false
          description: Name of pet
          schema:
            "$ref": "#/components/schemas/PetName"
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: array 
            items:
              "$ref": "#/components/schemas/PetStatus"
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            "$ref": "#/components/schemas/PetTags"
        - "$ref": "#/components/parameters/Cursor"
        - "$ref": "#/components/parameters/Limit"
      responses:
        "200":
          "$ref": "#/components/responses/PetArray"
        default:
          "$ref": "#/components/responses/ApiResponse"
    post:
      tags:
        - pet
      summary: Add new pet to the store.
      description: Add new pet to the store.
      operationId: addPet
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - pet
              properties: 
                pet:
                  description: Pet data 
                  "$ref": "#/components/schemas/Pet"
                photos: 
                  type: array
                  description: Pet images (up to 10)
                  minItems: 1
                  maxItems: 10
                  items:
                    type: string
                    description: "Min size: 1B, Max size: 10MB"
                    format: binary
                    example: binary string representation of jpeg image
            encoding:
              pet:
                contentType: application/json
              photos:
                contentType: image/jpeg
                explode: true
      responses:
        "201":
          "$ref": "#/components/responses/PetResponse"
        default:
          "$ref": "#/components/responses/ApiResponse"
  "/pet/{petId}":
    get:
      tags:
        - pet
      summary: Find pet by ID.
      description: Returns a single pet.
      operationId: getPetById
      parameters:
        - description: ID of pet to return
          "$ref": "#/components/parameters/PetIdParameter"
      responses:
        "200":
          "$ref": "#/components/responses/PetResponse"                
        default:
          "$ref": "#/components/responses/ApiResponse"
    put:
      tags:
        - pet
      summary: Replace existing pet data using Id.
      description: Replace existing pet data using Id.
      operationId: replacePet
      parameters:
        - description: ID of pet that needs to be replaced
          "$ref": "#/components/parameters/PetIdParameter"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - pet
              properties: 
                pet:
                  description: Pet data 
                  "$ref": "#/components/schemas/Pet"
                photos: 
                  type: array
                  description: Pet images (up to 10)
                  minItems: 1
                  maxItems: 10
                  items:
                    type: string
                    description: "Min size: 1B, Max size: 10MB"
                    format: binary
            encoding:
              pet:
                contentType: application/json
              photos:
                contentType: image/jpeg
      responses:
        "200":
          "$ref": "#/components/responses/PetResponse"
        default:
          "$ref": "#/components/responses/ApiResponse"
    delete:
      tags:
        - pet
      summary: Delete a pet.
      description: Delete a pet.
      operationId: deletePet
      parameters:
        - description: Pet id to delete
          "$ref": "#/components/parameters/PetIdParameter"
      responses:
        "200":
          description: Pet deleted
          headers:
            X-Request-Id:
              "$ref": "#/components/headers/X-Request-Id"
        default:
          "$ref": "#/components/responses/ApiResponse"
  "/pet/{petId}/image/{imageId}":
    get:
      tags:
        - pet
      summary: Get a pet image using ID.
      description: Get a pet image using ID.
      operationId: getImageByPetId
      parameters:
        - description: ID of pet
          "$ref": "#/components/parameters/PetIdParameter"
        - description: ID of image to retrieve
          name: imageId
          in: path
          required: true
          schema:
            "$ref": "#/components/schemas/Id"
      responses:
        "200":
          description: Successful response
          headers:
            X-Request-Id:
              "$ref": "#/components/headers/X-Request-Id"
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
                example: binary string representation of jpeg image
        default:
          "$ref": "#/components/responses/ApiResponse"
  # "/store/inventory":
  #   get:
  #     tags:
  #     - store
  #     summary: Returns pet inventories by status.
  #     description: Returns a map of status codes to quantities.
  #     operationId: getInventory
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               additionalProperties:
  #                 type: integer
  #                 format: int32
  #       default:
  #         description: Unexpected error
  # "/store/order":
  #   post:
  #     tags:
  #     - store
  #     summary: Place an order for a pet.
  #     description: Place a new order in the store.
  #     operationId: placeOrder
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             "$ref": "#/components/schemas/Order"
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               "$ref": "#/components/schemas/Order"
  #       "400":
  #         description: Invalid input
  #       "422":
  #         description: Validation exception
  #       default:
  #         description: Unexpected error
  # "/store/order/{orderId}":
  #   get:
  #     tags:
  #     - store
  #     summary: Find purchase order by ID.
  #     description: For valid response try integer IDs with value <= 5 or > 10. Other
  #       values will generate exceptions.
  #     operationId: getOrderById
  #     parameters:
  #     - name: orderId
  #       in: path
  #       description: ID of order that needs to be fetched
  #       required: true
  #       schema:
  #         type: integer
  #         format: int64
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               "$ref": "#/components/schemas/Order"
  #       "400":
  #         description: Invalid ID supplied
  #       "404":
  #         description: Order not found
  #       default:
  #         description: Unexpected error
  #   delete:
  #     tags:
  #     - store
  #     summary: Delete purchase order by identifier.
  #     description: For valid response try integer IDs with value < 1000. Anything
  #       above 1000 or non-integers will generate API errors.
  #     operationId: deleteOrder
  #     parameters:
  #     - name: orderId
  #       in: path
  #       description: ID of the order that needs to be deleted
  #       required: true
  #       schema:
  #         type: integer
  #         format: int64
  #     responses:
  #       "200":
  #         description: order deleted
  #       "400":
  #         description: Invalid ID supplied
  #       "404":
  #         description: Order not found
  #       default:
  #         description: Unexpected error
  # "/user":
  #   post:
  #     tags:
  #     - user
  #     summary: Create user.
  #     description: This can only be done by the logged in user.
  #     operationId: createUser
  #     requestBody:
  #       description: Created user object
  #       content:
  #         application/json:
  #           schema:
  #             "$ref": "#/components/schemas/User"
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               "$ref": "#/components/schemas/User"
  #       default:
  #         description: Unexpected error
  # "/user/createWithList":
  #   post:
  #     tags:
  #     - user
  #     summary: Creates list of users with given input array.
  #     description: Creates list of users with given input array.
  #     operationId: createUsersWithListInput
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: array
  #             items:
  #               "$ref": "#/components/schemas/User"
  #     responses:
  #       "200":
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               "$ref": "#/components/schemas/User"
  #       default:
  #         description: Unexpected error
  # "/user/login":
  #   get:
  #     tags:
  #     - user
  #     summary: Logs user into the system.
  #     description: Log into the system.
  #     operationId: loginUser
  #     parameters:
  #     - name: username
  #       in: query
  #       description: The user name for login
  #       required: false
  #       schema:
  #         type: string
  #     - name: password
  #       in: query
  #       description: The password for login in clear text
  #       required: false
  #       schema:
  #         type: string
  #     responses:
  #       "200":
  #         description: successful operation
  #         headers:
  #           X-Rate-Limit:
  #             description: calls per hour allowed by the user
  #             schema:
  #               type: integer
  #               format: int32
  #           X-Expires-After:
  #             description: date in UTC when token expires
  #             schema:
  #               type: string
  #               format: date-time
  #         content:
  #           application/json:
  #             schema:
  #               type: string
  #       "400":
  #         description: Invalid username/password supplied
  #       default:
  #         description: Unexpected error
  # "/user/logout":
  #   get:
  #     tags:
  #     - user
  #     summary: Logs out current logged in user session.
  #     description: Log user out of the system.
  #     operationId: logoutUser
  #     parameters: []
  #     responses:
  #       "200":
  #         description: successful operation
  #       default:
  #         description: Unexpected error
  # "/user/{username}":
  #   get:
  #     tags:
  #     - user
  #     summary: Get user by user name.
  #     description: Get user detail based on username.
  #     operationId: getUserByName
  #     parameters:
  #     - name: username
  #       in: path
  #       description: The name that needs to be fetched. Use user1 for testing
  #       required: true
  #       schema:
  #         type: string
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               "$ref": "#/components/schemas/User"
  #       "400":
  #         description: Invalid username supplied
  #       "404":
  #         description: User not found
  #       default:
  #         description: Unexpected error
  #   put:
  #     tags:
  #     - user
  #     summary: Update user resource.
  #     description: This can only be done by the logged in user.
  #     operationId: updateUser
  #     parameters:
  #     - name: username
  #       in: path
  #       description: name that need to be deleted
  #       required: true
  #       schema:
  #         type: string
  #     requestBody:
  #       description: Update an existent user in the store
  #       content:
  #         application/json:
  #           schema:
  #             "$ref": "#/components/schemas/User"
  #     responses:
  #       "200":
  #         description: successful operation
  #       "400":
  #         description: bad request
  #       "404":
  #         description: user not found
  #       default:
  #         description: Unexpected error
  #   delete:
  #     tags:
  #     - user
  #     summary: Delete user resource.
  #     description: This can only be done by the logged in user.
  #     operationId: deleteUser
  #     parameters:
  #     - name: username
  #       in: path
  #       description: The name that needs to be deleted
  #       required: true
  #       schema:
  #         type: string
  #     responses:
  #       "200":
  #         description: User deleted
  #       "400":
  #         description: Invalid username supplied
  #       "404":
  #         description: User not found
  #       default:
  #         description: Unexpected error
components:
  schemas:
    Id: 
      type: string
      minLength: 1
      maxLength: 45
    PetId: 
      type: object
      required:
        - id
      properties:
        id:
          "$ref": "#/components/schemas/Id"
    PetName:
      type: string
      example: doggie
      minLength: 1
      maxLength: 100
      pattern: "^[a-z\\- ]+$"
    PetTags: 
      type: array
      minItems: 1
      maxItems: 50
      items:
        type: string
        minLength: 1
        maxLength: 20
    PetStatus:
      type: string
      description: pet status in the store
      default: available
      enum:
        - available
        - pending
        - sold      
    Pet:
      required:
        - name
        - category_id
      type: object
      properties:
        name:
          "$ref": "#/components/schemas/PetName"
        category_id:
          type: string
          minLength: 1
          maxLength: 45
        tags:
          "$ref": "#/components/schemas/PetTags"
        status:
          "$ref": "#/components/schemas/PetStatus"
    PetResponse:
      allOf:
        - "$ref": "#/components/schemas/PetId"
        - "$ref": "#/components/schemas/Pet"
        - type: object
          properties:
            photo_urls:
              type: array
              items:
                description: URI of pet image
                type: string
                format: uri
                example: /pet/{petId}/image/{imageId}
            created_at:
              type: string
              format: date-time
              description: Date when the pet was created in the store
            updated_at:
              type: string
              format: date-time
              nullable: true
              description: Date when the pet was last updated
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      required: true
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Pet"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              "$ref": "#/components/schemas/User"
  responses:
    PetResponse: 
      description: "Successful Pet object response"
      headers:
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema: 
            "$ref": "#/components/schemas/PetResponse"
    PetArray:
      description: "Successful Pet array response"
      headers:
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
        X-Next-Cursor:
          "$ref": "#/components/headers/X-Next-Cursor"
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: integer
                description: Total number of pets
              pets:
                type: array
                items:
                  "$ref": "#/components/schemas/PetResponse"
    ApiResponse:
      description: "Generic API Response"
      headers:
        X-Request-Id:
          "$ref": "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              action:
                type: string
              message:
                type: string
  parameters:
    PetIdParameter:
      name: petId
      in: path
      required: true
      schema:
        "$ref": "#/components/schemas/Id"
    Cursor:
      name: cursor
      in: query
      description: Cursor for pagination (from previous response)
      required: false
      schema:
        type: string
        minLength: 1
        maxLength: 1000
    Limit:
      name: limit
      in: query
      description: Number of items to return
      required: false
      schema:
        type: integer
        minimum: 10
        maximum: 50
        default: 20
  headers:
    X-Next-Cursor:
      description: "Cursor for the next page (null if no more pages)"
      required: true
      schema:
        type: string
        nullable: true
    X-Request-Id:
      description: "Unique request identifier for tracing"
      required: true
      schema:
        type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer          
      bearerFormat: JWT 
      description: "JWT Bearer token"
